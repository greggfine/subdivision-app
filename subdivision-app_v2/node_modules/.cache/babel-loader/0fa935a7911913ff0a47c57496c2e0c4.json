{"ast":null,"code":"import { shuffle } from \"lodash\";\nimport startStopTimes from \"../startStopData\"; // array of shuffled objects\n\nconst shuffledStartStopTimes = shuffle(startStopTimes);\nlet count = 0;\nlet randCount;\nexport const playNextReducer = (state = {\n  startStopTimes: shuffledStartStopTimes[count],\n  wrongNotation: shuffledStartStopTimes[count + 1]\n}, action) => {\n  switch (action.type) {\n    case \"PLAY_NEXT\":\n      count++;\n      randCount = Math.floor(Math.random() * shuffledStartStopTimes.length);\n\n      while (randCount === count) {\n        randCount++;\n      }\n\n      return {\n        startStopTimes: shuffledStartStopTimes[count],\n        wrongNotation: shuffledStartStopTimes[randCount]\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/reducers/playNextReducer.js"],"names":["shuffle","startStopTimes","shuffledStartStopTimes","count","randCount","playNextReducer","state","wrongNotation","action","type","Math","floor","random","length"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;;AACA,MAAMC,sBAAsB,GAAGF,OAAO,CAACC,cAAD,CAAtC;AAEA,IAAIE,KAAK,GAAG,CAAZ;AACA,IAAIC,SAAJ;AACA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,KAAK,GAAG;AACNL,EAAAA,cAAc,EAAEC,sBAAsB,CAACC,KAAD,CADhC;AAENI,EAAAA,aAAa,EAAEL,sBAAsB,CAACC,KAAK,GAAG,CAAT;AAF/B,CADqB,EAK7BK,MAL6B,KAM1B;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACEN,MAAAA,KAAK;AACLC,MAAAA,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,sBAAsB,CAACW,MAAlD,CAAZ;;AACA,aAAOT,SAAS,KAAKD,KAArB,EAA4B;AAC1BC,QAAAA,SAAS;AACV;;AACD,aAAO;AACLH,QAAAA,cAAc,EAAEC,sBAAsB,CAACC,KAAD,CADjC;AAELI,QAAAA,aAAa,EAAEL,sBAAsB,CAACE,SAAD;AAFhC,OAAP;;AAIF;AACE,aAAOE,KAAP;AAZJ;AAcD,CArBM","sourcesContent":["import { shuffle } from \"lodash\";\nimport startStopTimes from \"../startStopData\";\n\n// array of shuffled objects\nconst shuffledStartStopTimes = shuffle(startStopTimes);\n\nlet count = 0;\nlet randCount;\nexport const playNextReducer = (\n  state = {\n    startStopTimes: shuffledStartStopTimes[count],\n    wrongNotation: shuffledStartStopTimes[count + 1]\n  },\n  action\n) => {\n  switch (action.type) {\n    case \"PLAY_NEXT\":\n      count++;\n      randCount = Math.floor(Math.random() * shuffledStartStopTimes.length);\n      while (randCount === count) {\n        randCount++;\n      }\n      return {\n        startStopTimes: shuffledStartStopTimes[count],\n        wrongNotation: shuffledStartStopTimes[randCount]\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}