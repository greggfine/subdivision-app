{"ast":null,"code":"import { shuffle } from \"lodash\";\nconst startStopTimes = [{\n  start: \"00.00\",\n  stop: \"04.85\"\n}, {\n  start: \"05.00\",\n  stop: \"09.90\"\n}, {\n  start: \"10.10\",\n  stop: \"15.10\"\n}, {\n  start: \"15.30\",\n  stop: \"20.30\"\n}];\nconst shuffledStartStopTimes = shuffle(startStopTimes);\nlet count = 0;\nexport const playNextReducer = (state = shuffledStartStopTimes[count], action) => {\n  switch (action.type) {\n    case \"PLAY_NEXT\":\n      if (count <= shuffledStartStopTimes.length) {\n        return shuffledStartStopTimes[count++];\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/reducers/playNextReducer.js"],"names":["shuffle","startStopTimes","start","stop","shuffledStartStopTimes","count","playNextReducer","state","action","type","length"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AAEA,MAAMC,cAAc,GAAG,CACrB;AAAEC,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CADqB,EAErB;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CAFqB,EAGrB;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CAHqB,EAIrB;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CAJqB,CAAvB;AAMA,MAAMC,sBAAsB,GAAGJ,OAAO,CAACC,cAAD,CAAtC;AAEA,IAAII,KAAK,GAAG,CAAZ;AAEA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,KAAK,GAAGH,sBAAsB,CAACC,KAAD,CADD,EAE7BG,MAF6B,KAG1B;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,UAAIJ,KAAK,IAAID,sBAAsB,CAACM,MAApC,EAA4C;AAC1C,eAAON,sBAAsB,CAACC,KAAK,EAAN,CAA7B;AACD,OAFD,MAEO;AACL,eAAOE,KAAP;AACD;;AACH;AACE,aAAOA,KAAP;AARJ;AAUD,CAdM","sourcesContent":["import { shuffle } from \"lodash\";\n\nconst startStopTimes = [\n  { start: \"00.00\", stop: \"04.85\" },\n  { start: \"05.00\", stop: \"09.90\" },\n  { start: \"10.10\", stop: \"15.10\" },\n  { start: \"15.30\", stop: \"20.30\" }\n];\nconst shuffledStartStopTimes = shuffle(startStopTimes);\n\nlet count = 0;\n\nexport const playNextReducer = (\n  state = shuffledStartStopTimes[count],\n  action\n) => {\n  switch (action.type) {\n    case \"PLAY_NEXT\":\n      if (count <= shuffledStartStopTimes.length) {\n        return shuffledStartStopTimes[count++];\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}