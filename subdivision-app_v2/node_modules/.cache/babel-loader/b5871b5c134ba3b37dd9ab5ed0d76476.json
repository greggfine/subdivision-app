{"ast":null,"code":"/*\n\t----------------------------------------------------------\n\tMIDI/player : 2015-10-18 : https://mudcu.be\n\t----------------------------------------------------------\n\thttps://github.com/mudcube/MIDI.js\n\t----------------------------------------------------------\n*/\nif (typeof MIDI === 'undefined') MIDI = {};\nMIDI.player = new function () {\n  'use strict';\n\n  var player = this;\n  galactic.EventEmitter(player); // player.on(...)\n\n  /* Scheduling */\n\n  var _schedulePerRequest = 20;\n  var _scheduleMax = 100;\n  /* State */\n\n  var _midiState = {};\n  /* Queue */\n\n  var _midiQueue = [];\n  /* Events */\n\n  var _midiEvents = {};\n\n  var _midiEventIndex;\n\n  var _midiEventTime;\n  /* File */\n\n\n  var _midiFile;\n  /** properties **/\n\n\n  (function () {\n    var _currentTime = 0;\n    var _playing = false;\n    var _now = 0;\n    Object.defineProperties(player, {\n      'bpm': finiteValue(null, true),\n      // beats-per-minute override\n      'warp': finiteValue(1.0, true),\n      // warp beats-per-minute\n      'transpose': finiteValue(0.0, true),\n      // transpose notes up or down\n      'currentTime': {\n        // current time within current song\n        get: function () {\n          if (player.playing) {\n            return _currentTime + (performance.now() - _now);\n          } else {\n            return _currentTime;\n          }\n        },\n        set: function (time) {\n          if (Number.isFinite(time)) {\n            setTime(time);\n          }\n        }\n      },\n      'duration': finiteValue(0, false),\n      // duration of current song\n      'playing': {\n        // current time within current song\n        get: function () {\n          return _playing;\n        },\n        set: function (playing) {\n          setTime(player.currentTime);\n          _playing = playing;\n        }\n      }\n    });\n\n    function finiteValue(_value, refresh) {\n      return {\n        get: function () {\n          return _value;\n        },\n        set: function (value) {\n          if (Number.isFinite(value)) {\n            _value = value;\n            refresh && refreshAudio();\n          }\n        }\n      };\n\n      function refreshAudio() {\n        if (_midiFile) {\n          player.stop();\n          readMidiFile();\n          requestEvents(0, true);\n        }\n      }\n\n      ;\n    }\n\n    ;\n\n    function setTime(time) {\n      _now = performance.now();\n      _currentTime = clamp(0, player.duration, time);\n    }\n\n    ;\n  })();\n  /** playback **/\n\n\n  player.start = function (startAt) {\n    cancelEvents();\n    player.currentTime = startAt;\n    requestEvents(player.currentTime, true);\n  };\n\n  player.stop = function () {\n    cancelEvents();\n    player.currentTime = 0;\n  };\n\n  player.pause = function () {\n    cancelEvents();\n  };\n  /** animation **/\n\n\n  player.setAnimation = function (callback) {\n    //- player.on('tick', ...)\n    var currentTime = 0;\n    var nowSys = 0;\n    var nowMidi = 0; //\n\n    player.clearAnimation();\n    requestAnimationFrame(function frame() {\n      player.frameId = requestAnimationFrame(frame);\n\n      if (player.duration) {\n        if (player.playing) {\n          currentTime = nowMidi === player.currentTime ? nowSys - Date.now() : 0;\n\n          if (player.currentTime === 0) {\n            currentTime = 0;\n          } else {\n            currentTime = player.currentTime - currentTime;\n          }\n\n          if (nowMidi !== player.currentTime) {\n            nowSys = Date.now();\n            nowMidi = player.currentTime;\n          }\n        } else {\n          currentTime = player.currentTime;\n        }\n\n        var duration = player.duration;\n        var percent = currentTime / duration;\n        var total = currentTime / 1000;\n        var minutes = total / 60;\n        var seconds = total - minutes * 60;\n        var t1 = minutes * 60 + seconds;\n        var t2 = duration / 1000;\n\n        if (t2 - t1 < -1.0) {\n          return;\n        } else {\n          var progress = Math.min(1.0, t1 / t2);\n\n          if (progress !== callback.progress) {\n            callback.progress = progress;\n            callback({\n              progress: progress,\n              currentTime: t1,\n              duration: t2\n            });\n          }\n        }\n      }\n    });\n  };\n\n  player.clearAnimation = function () {\n    //- player.off('tick', ...)\n    player.frameId && cancelAnimationFrame(player.frameId);\n  };\n  /* Request Events */\n\n\n  function requestEvents(startAt, seek) {\n    if (startAt > player.duration) {\n      // song finished\n      return;\n    }\n    /* find current position */\n\n\n    if (seek) {\n      // seek to point in time\n      if (player.playing) {\n        cancelEvents();\n      } else {\n        player.playing = true;\n      }\n\n      var packet = seekPacket(startAt);\n      var packetIndex = packet.idx;\n      var packetTime = _midiEventTime = packet.time;\n    } else {\n      // streaming to queue\n      var packetIndex = _midiEventIndex;\n      var packetTime = _midiEventTime;\n    }\n    /* queue out events */\n\n\n    var future = startAt - player.currentTime; // in ms\n\n    var requests = 0;\n    var length = _midiEvents.length;\n\n    while (packetIndex < length && requests <= _schedulePerRequest) {\n      var packet = _midiEvents[packetIndex];\n      _midiEventIndex = ++packetIndex;\n      _midiEventTime += packet[1];\n      startAt = _midiEventTime - packetTime;\n      var event = packet[0].event;\n      var type = event.type;\n      var subtype = event.subtype;\n\n      if (handleEvent[subtype]) {\n        switch (type) {\n          case 'channel':\n            handleChannelEvent();\n            break;\n\n          case 'meta':\n            handleMetaEvent();\n            break;\n        }\n      }\n    }\n    /* meta event */\n\n\n    function handleMetaEvent() {\n      switch (subtype) {\n        case 'setTempo':\n          // \t\t\t\t\tconsole.log(event); //- handle tempo changes\n          break;\n      }\n    }\n\n    ;\n    /* channel event */\n\n    function handleChannelEvent() {\n      var channelId = event.channel;\n      var channel = MIDI.channels[channelId];\n      var delay = Math.max(0, (startAt + future) / 1000);\n\n      switch (subtype) {\n        case 'controller':\n          // \t\t\t\t\tchannel.set('controller', event.controllerType, event.value, delay);\n          MIDI.setController(channelId, event.controllerType, event.value, delay); //- depreciate\n\n          break;\n\n        case 'programChange':\n          var program = event.programNumber;\n\n          if (programIsUsed(program)) {\n            // \t\t\t\t\t\tchannel.set('program', program, delay);\n            MIDI.programChange(channelId, program, delay); //- depreciate\n          }\n\n          break;\n\n        case 'pitchBend':\n          var pitch = event.value; // \t\t\t\t\tchannel.set('detune', pitch, delay);\n\n          MIDI.setPitchBend(channelId, pitch, delay); //- depreciate\n\n          break;\n\n        case 'noteOn':\n          var noteNumber = transpose(event.noteNumber);\n\n          _midiQueue.push({\n            promise: channel.noteOn(noteNumber, event.velocity / 127, delay),\n            timeout: wait(event, noteNumber, _midiEventTime, delay)\n          });\n\n          requests++;\n          break;\n\n        case 'noteOff':\n          var noteNumber = transpose(event.noteNumber);\n\n          _midiQueue.push({\n            promise: channel.noteOff(noteNumber, delay),\n            timeout: wait(event, noteNumber, _midiEventTime, delay)\n          });\n\n          requests++;\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    ;\n    /* event tracking */\n\n    function wait(event, noteNumber, currentTime, delay) {\n      return setTimeout(function () {\n        var packet = galactic.util.copy(event);\n        packet.noteNumber = noteNumber;\n        player.emit('event', packet);\n\n        _midiQueue.shift();\n\n        var packetId = packet.channel + 'x' + packet.noteNumber;\n\n        switch (packet.subtype) {\n          case 'noteOn':\n            _midiState[packetId] = packet;\n            break;\n\n          case 'noteOff':\n            delete _midiState[packetId];\n            break;\n        }\n\n        if (_midiQueue.length <= _scheduleMax) {\n          requestEvents(_midiEventTime);\n        }\n      }, delay * 1000);\n    }\n\n    ;\n    /* change program */\n\n    function programIsUsed(programNumber) {\n      var program = MIDI.getProgram(programNumber);\n      return program && player.instruments[program.nameId];\n    }\n\n    ;\n    /* seek to point in time */\n\n    function seekPacket(seekTime) {\n      var time = 0;\n      var length = _midiEvents.length;\n\n      for (var idx = 0; idx < length; idx++) {\n        var event = _midiEvents[idx];\n        var eventDuration = event[1];\n\n        if (time + eventDuration < seekTime) {\n          time += eventDuration;\n        } else {\n          break;\n        }\n      }\n\n      return {\n        idx: idx,\n        time: time\n      };\n    }\n\n    ;\n    /* transpose notes */\n\n    function transpose(noteNumber) {\n      return clamp(0, 127, noteNumber + player.transpose);\n    }\n\n    ;\n  }\n\n  ;\n  /* Cancel Events */\n\n  function cancelEvents() {\n    if (player.playing) {\n      player.playing = false;\n\n      while (_midiQueue.length) {\n        var packet = _midiQueue.pop();\n\n        if (packet) {\n          packet.promise && packet.promise.cancel();\n          clearTimeout(packet.timeout);\n        }\n      }\n\n      for (var sid in _midiState) {\n        var event = _midiState[sid];\n        player.emit('event', {\n          channel: event.channel,\n          noteNumber: event.noteNumber,\n          status: event.status - 16,\n          subtype: 'noteOff',\n          type: 'channel'\n        });\n      }\n    }\n  }\n\n  ;\n  /* math */\n\n  function clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  }\n\n  ;\n  /* read data */\n\n  function readMidiFile() {\n    // PER: handle the case where the caller already has the midi events. Don't need to load anything here.\n    if (_midiFile) _midiEvents = Replayer(MidiFile(_midiFile), player.bpm);\n    player.duration = getLength();\n\n    function getLength() {\n      var length = _midiEvents.length;\n      var totalTime = 0.0;\n\n      for (var n = 0; n < length; n++) {\n        totalTime += _midiEvents[n][1];\n      }\n\n      return totalTime;\n    }\n\n    ;\n  }\n\n  ;\n\n  function readMetadata() {\n    player.instruments = readInstruments(); // \t\tplayer.notes = readNotes();\n\n    function readNotes() {\n      //- use me; download *only* specific notes\n      var notes = {};\n\n      for (var i = 0; i < _midiEvents.length; i++) {\n        var packet = _midiEvents[i];\n        var event = packet[0].event;\n\n        if (Number.isFinite(event.noteNumber)) {\n          notes[event.noteNumber] = true;\n        }\n      }\n\n      return Object.keys(notes);\n    }\n\n    ;\n\n    function readInstruments() {\n      var instruments = {};\n      var programChange = {};\n\n      for (var n = 0; n < _midiEvents.length; n++) {\n        var event = _midiEvents[n][0].event;\n\n        if (event.type === 'channel') {\n          var channel = event.channel;\n\n          switch (event.subtype) {\n            case 'programChange':\n              programChange[channel] = event.programNumber;\n              break;\n\n            case 'noteOn':\n              var programId = programChange[channel];\n\n              if (Number.isFinite(programId)) {\n                if (handleEvent.programChange) {\n                  var program = MIDI.getProgram(programId);\n                } else {\n                  var channel = MIDI.channels[channel];\n                  var program = MIDI.getProgram(channel.program);\n                }\n\n                instruments[program.nameId] = true;\n              }\n\n              break;\n          }\n        }\n      }\n\n      return instruments;\n    }\n\n    ;\n  }\n\n  ;\n  /* Custom event handlers */\n\n  var handleEvent = {\n    controller: true,\n    noteOff: true,\n    noteOn: true,\n    pitchBend: true,\n    setTempo: true,\n    programChange: true\n  };\n\n  player.handleEvent = function (type, truthy) {\n    handleEvent[type] = truthy;\n  };\n  /** Load **/\n\n\n  player.load = function (args) {\n    return new Promise(function (resolve, reject) {\n      if (typeof args === 'string') args = {\n        src: args\n      };\n      var src = args.src;\n      var onprogress = args.onprogress;\n      player.stop(); // PER: Handle the case where the caller already has the events in an array\n\n      if (args.events) {\n        _midiEvents = args.events;\n        _midiFile = undefined;\n        load();\n      } else if (src.indexOf('base64,') !== -1) {\n        _midiFile = atob(src.split(',')[1]);\n        load();\n      } else {\n        galactic.request({\n          url: src,\n          mimeType: 'text/plain; charset=x-user-defined',\n          onerror: function () {\n            reject && reject('Unable to load MIDI file: ' + src);\n          },\n          onsuccess: function (event, responseText) {\n            _midiFile = toBase64(responseText);\n            load();\n          }\n        });\n      }\n\n      function load() {\n        try {\n          readMidiFile();\n          readMetadata();\n          MIDI.setup({\n            instruments: player.instruments,\n            onprogress: onprogress\n          }).then(function (res) {\n            resolve(res);\n          }).catch(function (err) {\n            reject(err);\n          });\n        } catch (event) {\n          reject && reject(event);\n        }\n      }\n\n      ;\n\n      function toBase64(data) {\n        var res = [];\n        var fromCharCode = String.fromCharCode;\n\n        for (var i = 0, length = data.length; i < length; i++) {\n          res[i] = fromCharCode(data.charCodeAt(i) & 255);\n        }\n\n        return res.join('');\n      }\n\n      ;\n    });\n  };\n}();","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/node_modules/midi/js/player.js"],"names":["MIDI","player","galactic","EventEmitter","_schedulePerRequest","_scheduleMax","_midiState","_midiQueue","_midiEvents","_midiEventIndex","_midiEventTime","_midiFile","_currentTime","_playing","_now","Object","defineProperties","finiteValue","get","playing","performance","now","set","time","Number","isFinite","setTime","currentTime","_value","refresh","value","refreshAudio","stop","readMidiFile","requestEvents","clamp","duration","start","startAt","cancelEvents","pause","setAnimation","callback","nowSys","nowMidi","clearAnimation","requestAnimationFrame","frame","frameId","Date","percent","total","minutes","seconds","t1","t2","progress","Math","min","cancelAnimationFrame","seek","packet","seekPacket","packetIndex","idx","packetTime","future","requests","length","event","type","subtype","handleEvent","handleChannelEvent","handleMetaEvent","channelId","channel","channels","delay","max","setController","controllerType","program","programNumber","programIsUsed","programChange","pitch","setPitchBend","noteNumber","transpose","push","promise","noteOn","velocity","timeout","wait","noteOff","setTimeout","util","copy","emit","shift","packetId","getProgram","instruments","nameId","seekTime","eventDuration","pop","cancel","clearTimeout","sid","status","Replayer","MidiFile","bpm","getLength","totalTime","n","readMetadata","readInstruments","readNotes","notes","i","keys","programId","controller","pitchBend","setTempo","truthy","load","args","Promise","resolve","reject","src","onprogress","events","undefined","indexOf","atob","split","request","url","mimeType","onerror","onsuccess","responseText","toBase64","setup","then","res","catch","err","data","fromCharCode","String","charCodeAt","join"],"mappings":"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","sourcesContent":["/*\n\t----------------------------------------------------------\n\tMIDI/player : 2015-10-18 : https://mudcu.be\n\t----------------------------------------------------------\n\thttps://github.com/mudcube/MIDI.js\n\t----------------------------------------------------------\n*/\n\nif (typeof MIDI === 'undefined') MIDI = {};\n\nMIDI.player = new function () { 'use strict';\n\n\tvar player = this;\n\t\n\tgalactic.EventEmitter(player); // player.on(...)\n\n\t/* Scheduling */\n\tvar _schedulePerRequest = 20;\n\tvar _scheduleMax = 100;\n\n\t/* State */\n\tvar _midiState = {};\n\n\t/* Queue */\n\tvar _midiQueue = [];\n\n\t/* Events */\n\tvar _midiEvents = {};\n\tvar _midiEventIndex;\n\tvar _midiEventTime;\n\t\n\t/* File */\n\tvar _midiFile;\n\n\n\t/** properties **/\n\t(function () {\n\t\tvar _currentTime = 0;\n\t\tvar _playing = false;\n\t\tvar _now = 0;\n\n\t\tObject.defineProperties(player, {\n\t\t\t'bpm': finiteValue(null, true), // beats-per-minute override\n\t\t\t'warp': finiteValue(1.0, true), // warp beats-per-minute\n\t\t\t'transpose': finiteValue(0.0, true), // transpose notes up or down\n\t\t\t'currentTime': { // current time within current song\n\t\t\t\tget: function () {\n\t\t\t\t\tif (player.playing) {\n\t\t\t\t\t\treturn _currentTime + (performance.now() - _now);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _currentTime;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tset: function (time) {\n\t\t\t\t\tif (Number.isFinite(time)) {\n\t\t\t\t\t\tsetTime(time);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'duration': finiteValue(0, false), // duration of current song\n\t\t\t'playing': { // current time within current song\n\t\t\t\tget: function () {\n\t\t\t\t\treturn _playing;\n\t\t\t\t},\n\t\t\t\tset: function (playing) {\n\t\t\t\t\tsetTime(player.currentTime);\n\t\t\t\t\t_playing = playing;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tfunction finiteValue(_value, refresh) {\n\t\t\treturn {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn _value;\n\t\t\t\t},\n\t\t\t\tset: function (value) {\n\t\t\t\t\tif (Number.isFinite(value)) {\n\t\t\t\t\t\t_value = value;\n\t\t\t\t\t\trefresh && refreshAudio();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction refreshAudio() {\n\t\t\t\tif (_midiFile) {\n\t\t\t\t\tplayer.stop();\n\t\t\t\t\treadMidiFile();\n\t\t\t\t\trequestEvents(0, true);\n\t\t\t\t}\t\t\n\t\t\t};\n\t\t};\n\t\t\t\n\t\tfunction setTime(time) {\n\t\t\t_now = performance.now();\n\t\t\t_currentTime = clamp(0, player.duration, time);\n\t\t};\n\t})();\n\n\n\t/** playback **/\n\tplayer.start = function (startAt) {\n\t\tcancelEvents();\n\t\tplayer.currentTime = startAt;\n\t\trequestEvents(player.currentTime, true);\n\t};\n\n\tplayer.stop = function () {\n\t\tcancelEvents();\n\t\tplayer.currentTime = 0;\n\t};\n\n\tplayer.pause = function () {\n\t\tcancelEvents();\n\t};\n\n\n\t/** animation **/\n\tplayer.setAnimation = function (callback) { //- player.on('tick', ...)\n\t\tvar currentTime = 0;\n\t\tvar nowSys = 0;\n\t\tvar nowMidi = 0;\n\t\t//\n\t\tplayer.clearAnimation();\n\t\t\n\t\trequestAnimationFrame(function frame() {\n\t\t\tplayer.frameId = requestAnimationFrame(frame);\n\t\t\t\n\t\t\tif (player.duration) {\n\t\t\t\tif (player.playing) {\n\t\t\t\t\tcurrentTime = (nowMidi === player.currentTime) ? nowSys - Date.now() : 0;\n\t\t\t\t\t\n\t\t\t\t\tif (player.currentTime === 0) {\n\t\t\t\t\t\tcurrentTime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTime = player.currentTime - currentTime;\n\t\t\t\t\t}\n\t\t\t\t\tif (nowMidi !== player.currentTime) {\n\t\t\t\t\t\tnowSys = Date.now();\n\t\t\t\t\t\tnowMidi = player.currentTime;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcurrentTime = player.currentTime;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar duration = player.duration;\n\t\t\t\tvar percent = currentTime / duration;\n\t\t\t\tvar total = currentTime / 1000;\n\t\t\t\tvar minutes = total / 60;\n\t\t\t\tvar seconds = total - (minutes * 60);\n\t\t\t\tvar t1 = minutes * 60 + seconds;\n\t\t\t\tvar t2 = (duration / 1000);\n\t\t\t\tif (t2 - t1 < -1.0) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tvar progress = Math.min(1.0, t1 / t2);\n\t\t\t\t\tif (progress !== callback.progress) {\n\t\t\t\t\t\tcallback.progress = progress;\n\t\t\t\t\t\tcallback({\n\t\t\t\t\t\t\tprogress: progress,\n\t\t\t\t\t\t\tcurrentTime: t1,\n\t\t\t\t\t\t\tduration: t2\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tplayer.clearAnimation = function () { //- player.off('tick', ...)\n\t\tplayer.frameId && cancelAnimationFrame(player.frameId);\n\t};\n\n\n\t/* Request Events */\n\tfunction requestEvents(startAt, seek) {\n\t\tif (startAt > player.duration) { // song finished\n\t\t\treturn;\n\t\t}\n\n\t\t/* find current position */\n\t\tif (seek) { // seek to point in time\n\t\t\tif (player.playing) {\n\t\t\t\tcancelEvents();\n\t\t\t} else {\n\t\t\t\tplayer.playing = true;\n\t\t\t}\n\t\t\t\n\t\t\tvar packet = seekPacket(startAt);\n\t\t\tvar packetIndex = packet.idx;\n\t\t\tvar packetTime = _midiEventTime = packet.time;\n\t\t} else { // streaming to queue\n\t\t\tvar packetIndex = _midiEventIndex;\n\t\t\tvar packetTime = _midiEventTime;\n\t\t}\n\n\t\t/* queue out events */\n\t\tvar future = startAt - player.currentTime; // in ms\n\t\tvar requests = 0;\n\t\tvar length = _midiEvents.length;\n\t\twhile(packetIndex < length && requests <= _schedulePerRequest) {\n\t\t\tvar packet = _midiEvents[packetIndex];\n\t\t\t\n\t\t\t_midiEventIndex = ++packetIndex;\n\t\t\t_midiEventTime += packet[1];\n\t\t\t\n\t\t\tstartAt = _midiEventTime - packetTime;\n\t\t\t\n\t\t\tvar event = packet[0].event;\n\t\t\tvar type = event.type;\n\t\t\tvar subtype = event.subtype;\n\t\t\t\n\t\t\tif (handleEvent[subtype]) {\n\t\t\t\tswitch(type) {\n\t\t\t\t\tcase 'channel':\n\t\t\t\t\t\thandleChannelEvent();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'meta':\n\t\t\t\t\t\thandleMetaEvent();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* meta event */\n\t\tfunction handleMetaEvent() {\n\t\t\tswitch(subtype) {\n\t\t\t\tcase 'setTempo':\n// \t\t\t\t\tconsole.log(event); //- handle tempo changes\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\t\n\t\t/* channel event */\n\t\tfunction handleChannelEvent() {\n\t\t\tvar channelId = event.channel;\n\t\t\tvar channel = MIDI.channels[channelId];\n\t\t\tvar delay = Math.max(0, (startAt + future) / 1000);\n\n\t\t\tswitch(subtype) {\n\t\t\t\tcase 'controller':\n// \t\t\t\t\tchannel.set('controller', event.controllerType, event.value, delay);\n\t\t\t\t\tMIDI.setController(channelId, event.controllerType, event.value, delay); //- depreciate\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'programChange':\n\t\t\t\t\tvar program = event.programNumber;\n\t\t\t\t\tif (programIsUsed(program)) {\n// \t\t\t\t\t\tchannel.set('program', program, delay);\n\t\t\t\t\t\tMIDI.programChange(channelId, program, delay); //- depreciate\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'pitchBend':\n\t\t\t\t\tvar pitch = event.value;\n// \t\t\t\t\tchannel.set('detune', pitch, delay);\n\t\t\t\t\tMIDI.setPitchBend(channelId, pitch, delay); //- depreciate\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'noteOn':\n\t\t\t\t\tvar noteNumber = transpose(event.noteNumber);\n\t\t\t\t\t_midiQueue.push({\n\t\t\t\t\t\tpromise: channel.noteOn(noteNumber, event.velocity / 127, delay),\n\t\t\t\t\t\ttimeout: wait(event, noteNumber, _midiEventTime, delay)\n\t\t\t\t\t});\n\t\t\t\t\trequests++;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'noteOff':\n\t\t\t\t\tvar noteNumber = transpose(event.noteNumber);\n\t\t\t\t\t_midiQueue.push({\n\t\t\t\t\t\tpromise: channel.noteOff(noteNumber, delay),\n\t\t\t\t\t\ttimeout: wait(event, noteNumber, _midiEventTime, delay)\n\t\t\t\t\t});\n\t\t\t\t\trequests++;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\n\t\t/* event tracking */\n\t\tfunction wait(event, noteNumber, currentTime, delay) {\n\t\t\treturn setTimeout(function () {\n\t\t\t\tvar packet = galactic.util.copy(event);\n\t\t\t\tpacket.noteNumber = noteNumber;\n\t\t\t\t\n\t\t\t\tplayer.emit('event', packet);\n\t\t\t\t\n\t\t\t\t_midiQueue.shift();\n\t\t\t\t\n\t\t\t\tvar packetId = packet.channel + 'x' + packet.noteNumber;\n\t\t\t\tswitch(packet.subtype) {\n\t\t\t\t\tcase 'noteOn':\n\t\t\t\t\t\t_midiState[packetId] = packet;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'noteOff':\n\t\t\t\t\t\tdelete _midiState[packetId];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (_midiQueue.length <= _scheduleMax) {\n\t\t\t\t\trequestEvents(_midiEventTime);\n\t\t\t\t}\n\t\t\t}, delay * 1000);\n\t\t};\n\n\t\t/* change program */\n\t\tfunction programIsUsed(programNumber) {\n\t\t\tvar program = MIDI.getProgram(programNumber);\n\t\t\treturn program && player.instruments[program.nameId];\n\t\t};\n\n\t\t/* seek to point in time */\n\t\tfunction seekPacket(seekTime) {\n\t\t\tvar time = 0;\n\t\t\tvar length = _midiEvents.length;\n\t\t\tfor (var idx = 0; idx < length; idx++) {\n\t\t\t\tvar event = _midiEvents[idx];\n\t\t\t\tvar eventDuration = event[1];\n\t\t\t\tif (time + eventDuration < seekTime) {\n\t\t\t\t\ttime += eventDuration;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tidx: idx,\n\t\t\t\ttime: time\n\t\t\t};\n\t\t};\n\n\t\t/* transpose notes */\n\t\tfunction transpose(noteNumber) {\n\t\t\treturn clamp(0, 127, noteNumber + player.transpose);\n\t\t};\n\t};\n\n\n\t/* Cancel Events */\n\tfunction cancelEvents() {\n\t\tif (player.playing) {\n\t\t\tplayer.playing = false;\n\t\t\t\n\t\t\twhile(_midiQueue.length) {\n\t\t\t\tvar packet = _midiQueue.pop();\n\t\t\t\tif (packet) {\n\t\t\t\t\tpacket.promise && packet.promise.cancel();\n\t\t\t\t\tclearTimeout(packet.timeout);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var sid in _midiState) {\n\t\t\t\tvar event = _midiState[sid];\n\t\t\t\tplayer.emit('event', {\n\t\t\t\t\tchannel: event.channel,\n\t\t\t\t\tnoteNumber: event.noteNumber,\n\t\t\t\t\tstatus: event.status - 16,\n\t\t\t\t\tsubtype: 'noteOff',\n\t\t\t\t\ttype: 'channel'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\n\t/* math */\n\tfunction clamp(min, max, value) {\n\t\treturn (value < min) ? min : ((value > max) ? max : value);\n\t};\n\n\n\t/* read data */\n\tfunction readMidiFile() {\n\t\t// PER: handle the case where the caller already has the midi events. Don't need to load anything here.\n\t\tif (_midiFile)\n\t\t\t_midiEvents = Replayer(MidiFile(_midiFile), player.bpm);\n\t\tplayer.duration = getLength();\n\n\t\tfunction getLength() {\n\t\t\tvar length = _midiEvents.length;\n\t\t\tvar totalTime = 0.0;\n\t\t\tfor (var n = 0; n < length; n++) {\n\t\t\t\ttotalTime += _midiEvents[n][1];\n\t\t\t}\n\t\t\treturn totalTime;\n\t\t};\n\t};\n\n\tfunction readMetadata() {\n\t\tplayer.instruments = readInstruments();\n// \t\tplayer.notes = readNotes();\n\n\t\tfunction readNotes() { //- use me; download *only* specific notes\n\t\t\tvar notes = {};\n\t\t\tfor (var i = 0; i < _midiEvents.length; i ++) {\n\t\t\t\tvar packet = _midiEvents[i];\n\t\t\t\tvar event = packet[0].event;\n\t\t\t\tif (Number.isFinite(event.noteNumber)) {\n\t\t\t\t\tnotes[event.noteNumber] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Object.keys(notes);\n\t\t};\n\n\t\tfunction readInstruments() {\n\t\t\tvar instruments = {};\n\t\t\tvar programChange = {};\n\t\t\tfor (var n = 0; n < _midiEvents.length; n ++) {\n\t\t\t\tvar event = _midiEvents[n][0].event;\n\t\t\t\tif (event.type === 'channel') {\n\t\t\t\t\tvar channel = event.channel;\n\t\t\t\t\tswitch(event.subtype) {\n\t\t\t\t\t\tcase 'programChange':\n\t\t\t\t\t\t\tprogramChange[channel] = event.programNumber;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'noteOn':\n\t\t\t\t\t\t\tvar programId = programChange[channel];\n\t\t\t\t\t\t\tif (Number.isFinite(programId)) {\n\t\t\t\t\t\t\t\tif (handleEvent.programChange) {\n\t\t\t\t\t\t\t\t\tvar program = MIDI.getProgram(programId);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar channel = MIDI.channels[channel];\n\t\t\t\t\t\t\t\t\tvar program = MIDI.getProgram(channel.program);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinstruments[program.nameId] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn instruments;\n\t\t};\n\t};\n\n\n\t/* Custom event handlers */\n\tvar handleEvent = {\n\t\tcontroller: true,\n\t\tnoteOff: true,\n\t\tnoteOn: true,\n\t\tpitchBend: true,\n\t\tsetTempo: true,\n\t\tprogramChange: true\n\t};\n\n\tplayer.handleEvent = function (type, truthy) {\n\t\thandleEvent[type] = truthy;\n\t};\n\n\n\t/** Load **/\n\tplayer.load = function (args) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tif (typeof args === 'string') args = {src: args};\n\t\t\tvar src = args.src;\n\t\t\tvar onprogress = args.onprogress;\n\t\t\t\n\t\t\tplayer.stop();\n\n\t\t\t// PER: Handle the case where the caller already has the events in an array\n\t\t\tif (args.events) {\n\t\t\t\t_midiEvents = args.events;\n\t\t\t\t_midiFile = undefined;\n\t\t\t\tload();\n\t\t\t} else if (src.indexOf('base64,') !== -1) {\n\t\t\t\t_midiFile = atob(src.split(',')[1]);\n\t\t\t\tload();\n\t\t\t} else {\n\t\t\t\tgalactic.request({\n\t\t\t\t\turl: src,\n\t\t\t\t\tmimeType: 'text/plain; charset=x-user-defined',\n\t\t\t\t\tonerror: function () {\n\t\t\t\t\t\treject && reject('Unable to load MIDI file: ' + src);\n\t\t\t\t\t},\n\t\t\t\t\tonsuccess: function (event, responseText) {\n\t\t\t\t\t\t_midiFile = toBase64(responseText);\n\t\t\t\t\t\tload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction load() {\n\t\t\t\ttry {\n\t\t\t\t\treadMidiFile();\n\t\t\t\t\treadMetadata();\n\n\t\t\t\t\tMIDI.setup({\n\t\t\t\t\t\tinstruments: player.instruments,\n\t\t\t\t\t\tonprogress: onprogress\n\t\t\t\t\t}).then(function (res) {\n\t\t\t\t\t\tresolve(res);\n\t\t\t\t\t}).catch(function (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t});\n\t\t\t\t} catch(event) {\n\t\t\t\t\treject && reject(event);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction toBase64(data) {\n\t\t\t\tvar res = [];\n\t\t\t\tvar fromCharCode = String.fromCharCode;\n\t\t\t\tfor (var i = 0, length = data.length; i < length; i++) {\n\t\t\t\t\tres[i] = fromCharCode(data.charCodeAt(i) & 255);\n\t\t\t\t}\n\t\t\t\treturn res.join('');\n\t\t\t};\n\t\t});\n\t};\n};"]},"metadata":{},"sourceType":"script"}