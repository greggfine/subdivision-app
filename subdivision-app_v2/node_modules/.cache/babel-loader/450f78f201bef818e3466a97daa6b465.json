{"ast":null,"code":"var _jsxFileName = \"/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/components/Question.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRandQuestion } from \"../actions/getRandQuestionAction\";\nimport { Button } from \"semantic-ui-react\";\nimport Abcjs from \"react-abc\";\nimport loop3 from \"../audio/loop3.mp3\";\nconst notations = [\"X:1\\nT:#1\\nM:4/4\\nL:1/8\\nK:perc\\n|:cccc cccc|\", \"X:1\\nT:#2\\nM:4/4\\nL:1/8\\nK:perc\\n|:cc cc/c/ cccc|\", \"X:1\\nT:#3\\nM:4/4\\nL:1/8\\nK:perc\\n|:c/c c c c/ cc c/c/c/c/|\", \"X:1\\nT:#4\\nM:4/4\\nL:1/8\\nK:perc\\n|:  c c c c c c/c c/|\"];\n\nconst Question = ({\n  questions,\n  getRandQuestion,\n  playNext\n}) => {\n  return React.createElement(\"div\", {\n    className: \"question\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Abcjs, {\n    notation: notations[1],\n    parserParams: {} // engraverParams={{ responsive: \"resize\" }}\n    ,\n    renderParams: {\n      viewportHorizontal: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(\"audio\", {\n    src: `${loop3}#t=00:00:${playNext.start},00:00:${playNext.stop}`,\n    autoPlay: true,\n    type: \"audio/mp3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  playNext: state.playNext\n});\n\nexport default connect(mapStateToProps, {\n  getRandQuestion\n})(Question);","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/components/Question.jsx"],"names":["React","connect","getRandQuestion","Button","Abcjs","loop3","notations","Question","questions","playNext","viewportHorizontal","start","stop","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,SAAS,GAAG,CAChB,+CADgB,EAEhB,mDAFgB,EAGhB,4DAHgB,EAIhB,wDAJgB,CAAlB;;AAOA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaN,EAAAA,eAAb;AAA8BO,EAAAA;AAA9B,CAAD,KAA8C;AAC7D,SACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,QAAQ,EAAEH,SAAS,CAAC,CAAD,CADrB;AAEE,IAAA,YAAY,EAAE,EAFhB,CAGE;AAHF;AAIE,IAAA,YAAY,EAAE;AAAEI,MAAAA,kBAAkB,EAAE;AAAtB,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE;AACE,IAAA,GAAG,EAAG,GAAEL,KAAM,YAAWI,QAAQ,CAACE,KAAM,UAASF,QAAQ,CAACG,IAAK,EADjE;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,IAAI,EAAC,WAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAuBD,CAxBD;;AA0BA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCN,EAAAA,SAAS,EAAEM,KAAK,CAACN,SADe;AAEhCC,EAAAA,QAAQ,EAAEK,KAAK,CAACL;AAFgB,CAAL,CAA7B;;AAKA,eAAeR,OAAO,CAACY,eAAD,EAAkB;AAAEX,EAAAA;AAAF,CAAlB,CAAP,CAA8CK,QAA9C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRandQuestion } from \"../actions/getRandQuestionAction\";\nimport { Button } from \"semantic-ui-react\";\nimport Abcjs from \"react-abc\";\n\nimport loop3 from \"../audio/loop3.mp3\";\n\nconst notations = [\n  \"X:1\\nT:#1\\nM:4/4\\nL:1/8\\nK:perc\\n|:cccc cccc|\",\n  \"X:1\\nT:#2\\nM:4/4\\nL:1/8\\nK:perc\\n|:cc cc/c/ cccc|\",\n  \"X:1\\nT:#3\\nM:4/4\\nL:1/8\\nK:perc\\n|:c/c c c c/ cc c/c/c/c/|\",\n  \"X:1\\nT:#4\\nM:4/4\\nL:1/8\\nK:perc\\n|:  c c c c c c/c c/|\"\n];\n\nconst Question = ({ questions, getRandQuestion, playNext }) => {\n  return (\n    <div className=\"question\">\n      <Abcjs\n        notation={notations[1]}\n        parserParams={{}}\n        // engraverParams={{ responsive: \"resize\" }}\n        renderParams={{ viewportHorizontal: true }}\n      />\n      <audio\n        src={`${loop3}#t=00:00:${playNext.start},00:00:${playNext.stop}`}\n        autoPlay\n        type=\"audio/mp3\"\n      ></audio>\n\n      {/* <Button\n        onClick={() => {\n          getRandQuestion();\n        }}\n      >\n        Get Random Question\n      </Button> */}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  playNext: state.playNext\n});\n\nexport default connect(mapStateToProps, { getRandQuestion })(Question);\n"]},"metadata":{},"sourceType":"module"}