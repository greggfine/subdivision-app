{"ast":null,"code":"var tunebook = require('./abc_tunebook');\n\nvar midi = require('../midi/abc_midi_controls');\n\nvar midiCreate = require('../midi/abc_midi_create'); // A quick way to render a tune from javascript when interactivity is not required.\n// This is used when a javascript routine has some abc text that it wants to render\n// in a div or collection of divs. One tune or many can be rendered.\n//\n// parameters:\n//      output: an array of divs that the individual tunes are rendered to.\n//          If the number of tunes exceeds the number of divs in the array, then\n//          only the first tunes are rendered. If the number of divs exceeds the number\n//          of tunes, then the unused divs are cleared. The divs can be passed as either\n//          elements or strings of ids. If ids are passed, then the div MUST exist already.\n//          (if a single element is passed, then it is an implied array of length one.)\n//          (if a null is passed for an element, or the element doesn't exist, then that tune is skipped.)\n//      abc: text representing a tune or an entire tune book in ABC notation.\n//      renderParams: hash of:\n//          startingTune: an index, starting at zero, representing which tune to start rendering at.\n//              (If this element is not present, then rendering starts at zero.)\n\n\nvar renderMidi = function (output, abc, parserParams, midiParams, renderParams) {\n  var params = {};\n  var key;\n\n  if (parserParams) {\n    for (key in parserParams) {\n      if (parserParams.hasOwnProperty(key)) {\n        params[key] = parserParams[key];\n      }\n    }\n  }\n\n  if (midiParams) {\n    for (key in midiParams) {\n      if (midiParams.hasOwnProperty(key)) {\n        // There is a conflict with the name of the parameters \"listener\" and \"transpose\". If it comes in the second parameter, then it is for midi.\n        if (key === \"listener\") params.midiListener = midiParams[key];else if (key === 'transpose') params.midiTranspose = midiParams[key];else params[key] = midiParams[key];\n      }\n    }\n  }\n\n  if (renderParams) {\n    for (key in renderParams) {\n      if (renderParams.hasOwnProperty(key)) {\n        params[key] = renderParams[key];\n      }\n    }\n  }\n\n  if (params.generateInline === undefined) // default is to generate inline controls.\n    params.generateInline = true;\n  if (params.inlineControls) params.inlineControls.selectionToggle = false; // Override the selection option because there is no selection in the Basic call.\n\n  function callback(div, tune, index) {\n    var html = \"\";\n    var midiInst = midiCreate(tune, params);\n\n    if (params.generateInline) {\n      var inlineMidi = midiInst.inline ? midiInst.inline : midiInst;\n      var stopOld = div.innerHTML.indexOf(\"abcjs-midi-current\") >= 0;\n      html += midi.generateMidiControls(tune, params, inlineMidi, index, stopOld);\n    }\n\n    if (params.generateDownload) {\n      var downloadMidi = midiInst.download ? midiInst.download : midiInst;\n      html += midi.generateMidiDownloadLink(tune, params, downloadMidi, index);\n    }\n\n    div.innerHTML = html;\n\n    var find = function (element, cls) {\n      var els = element.getElementsByClassName(cls);\n      if (els.length === 0) return null;\n      return els[0];\n    };\n\n    if (params.generateInline && (params.animate || params.midiListener)) {\n      var parent = find(div, \"abcjs-inline-midi\");\n      parent.abcjsTune = tune;\n      parent.abcjsListener = params.midiListener;\n      parent.abcjsQpm = params.qpm;\n      parent.abcjsContext = params.context;\n\n      if (params.animate) {\n        var drumIntro = params.drumIntro ? params.drumIntro : 0;\n        parent.abcjsAnimate = params.animate.listener;\n        parent.abcjsTune = params.animate.target; // We need the version of the tune that was drawn: extra info is added during the drawing process.\n\n        parent.abcjsTune.setTiming(params.qpm, drumIntro);\n      }\n    }\n\n    if (params.generateInline && params.inlineControls && params.inlineControls.startPlaying) {\n      var startButton = find(div, \"abcjs-midi-start\");\n      midi.startPlaying(startButton);\n    }\n  }\n\n  return tunebook.renderEngine(callback, output, abc, params);\n};\n\nmodule.exports = renderMidi;","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/node_modules/abcjs/src/api/abc_tunebook_midi.js"],"names":["tunebook","require","midi","midiCreate","renderMidi","output","abc","parserParams","midiParams","renderParams","params","key","hasOwnProperty","midiListener","midiTranspose","generateInline","undefined","inlineControls","selectionToggle","callback","div","tune","index","html","midiInst","inlineMidi","inline","stopOld","innerHTML","indexOf","generateMidiControls","generateDownload","downloadMidi","download","generateMidiDownloadLink","find","element","cls","els","getElementsByClassName","length","animate","parent","abcjsTune","abcjsListener","abcjsQpm","qpm","abcjsContext","context","drumIntro","abcjsAnimate","listener","target","setTiming","startPlaying","startButton","renderEngine","module","exports"],"mappings":"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","sourcesContent":["var tunebook = require('./abc_tunebook');\n\nvar midi = require('../midi/abc_midi_controls');\nvar midiCreate = require('../midi/abc_midi_create');\n\n// A quick way to render a tune from javascript when interactivity is not required.\n// This is used when a javascript routine has some abc text that it wants to render\n// in a div or collection of divs. One tune or many can be rendered.\n//\n// parameters:\n//      output: an array of divs that the individual tunes are rendered to.\n//          If the number of tunes exceeds the number of divs in the array, then\n//          only the first tunes are rendered. If the number of divs exceeds the number\n//          of tunes, then the unused divs are cleared. The divs can be passed as either\n//          elements or strings of ids. If ids are passed, then the div MUST exist already.\n//          (if a single element is passed, then it is an implied array of length one.)\n//          (if a null is passed for an element, or the element doesn't exist, then that tune is skipped.)\n//      abc: text representing a tune or an entire tune book in ABC notation.\n//      renderParams: hash of:\n//          startingTune: an index, starting at zero, representing which tune to start rendering at.\n//              (If this element is not present, then rendering starts at zero.)\nvar renderMidi = function(output, abc, parserParams, midiParams, renderParams) {\n\tvar params = {};\n\tvar key;\n\tif (parserParams) {\n\t\tfor (key in parserParams) {\n\t\t\tif (parserParams.hasOwnProperty(key)) {\n\t\t\t\tparams[key] = parserParams[key];\n\t\t\t}\n\t\t}\n\t}\n\tif (midiParams) {\n\t\tfor (key in midiParams) {\n\t\t\tif (midiParams.hasOwnProperty(key)) {\n\t\t\t\t// There is a conflict with the name of the parameters \"listener\" and \"transpose\". If it comes in the second parameter, then it is for midi.\n\t\t\t\tif (key === \"listener\")\n\t\t\t\t\tparams.midiListener =  midiParams[key];\n\t\t\t\telse if (key === 'transpose')\n\t\t\t\t\tparams.midiTranspose = midiParams[key];\n\t\t\t\telse\n\t\t\t\t\tparams[key] = midiParams[key];\n\t\t\t}\n\t\t}\n\t}\n\tif (renderParams) {\n\t\tfor (key in renderParams) {\n\t\t\tif (renderParams.hasOwnProperty(key)) {\n\t\t\t\tparams[key] = renderParams[key];\n\t\t\t}\n\t\t}\n\t}\n    if (params.generateInline === undefined) // default is to generate inline controls.\n\t    params.generateInline = true;\n    if (params.inlineControls)\n\t    params.inlineControls.selectionToggle = false; // Override the selection option because there is no selection in the Basic call.\n\n    function callback(div, tune, index) {\n        var html = \"\";\n        var midiInst = midiCreate(tune, params);\n        if (params.generateInline) {\n            var inlineMidi = midiInst.inline ? midiInst.inline : midiInst;\n            var stopOld = div.innerHTML.indexOf(\"abcjs-midi-current\") >= 0;\n            html += midi.generateMidiControls(tune, params, inlineMidi, index, stopOld);\n        }\n        if (params.generateDownload) {\n            var downloadMidi = midiInst.download ? midiInst.download : midiInst;\n            html += midi.generateMidiDownloadLink(tune, params, downloadMidi, index);\n        }\n        div.innerHTML = html;\n        var find = function(element, cls) {\n            var els = element.getElementsByClassName(cls);\n            if (els.length === 0)\n                return null;\n            return els[0];\n        };\n        if (params.generateInline && (params.animate || params.midiListener)) {\n            var parent = find(div, \"abcjs-inline-midi\");\n            parent.abcjsTune = tune;\n            parent.abcjsListener = params.midiListener;\n            parent.abcjsQpm = params.qpm;\n            parent.abcjsContext = params.context;\n            if (params.animate) {\n                var drumIntro = params.drumIntro ? params.drumIntro : 0;\n                parent.abcjsAnimate = params.animate.listener;\n                parent.abcjsTune = params.animate.target; // We need the version of the tune that was drawn: extra info is added during the drawing process.\n                parent.abcjsTune.setTiming(params.qpm, drumIntro);\n            }\n        }\n        if (params.generateInline && params.inlineControls && params.inlineControls.startPlaying) {\n            var startButton = find(div, \"abcjs-midi-start\");\n            midi.startPlaying(startButton);\n        }\n\n    }\n\n    return tunebook.renderEngine(callback, output, abc, params);\n};\n\nmodule.exports = renderMidi;\n"]},"metadata":{},"sourceType":"script"}