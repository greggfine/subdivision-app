{"ast":null,"code":"/*\n\t----------------------------------------------------------------------\n\tadaptors-Audio\n\t----------------------------------------------------------------------\n\thttp://dev.w3.org/html5/spec/Overview.html#the-audio-element\n\t----------------------------------------------------------------------\n*/\nwindow.Audio && function () {\n  'use strict';\n\n  var midi = MIDI.adaptors.audio = {};\n  var _buffers = []; // the audio channels\n\n  var _buffer_nid = -1; // current channel\n\n\n  var _active = []; // programId + noteId that is currently playing in each 'channel', for routing noteOff/chordOff calls\n\n  var _apply = {};\n  /** connect **/\n\n  midi.connect = function (args) {\n    MIDI.adaptor.id = 'audio';\n    /** init **/\n\n    for (var bufferId = 0; bufferId < 12; bufferId++) {\n      _buffers[bufferId] || (_buffers[bufferId] = new Audio());\n    }\n    /** properties **/\n\n\n    defineProperties();\n    /** volume **/\n\n    _apply.volume = function (source) {\n      var channel = source._channel;\n\n      if (MIDI.mute || channel.mute) {\n        source.volume = 0.0;\n      } else {\n        var volume = MIDI.volume * channel.volume * source._volume;\n        source.volume = Math.min(1.0, Math.max(-1.0, volume * 2.0));\n      }\n    };\n    /** noteOn/Off **/\n\n\n    MIDI.noteOn = function (channelId, noteId, velocity, delay) {\n      switch (typeof noteId) {\n        case 'number':\n          return noteOn.apply(null, arguments);\n\n        case 'string':\n          break;\n\n        case 'object':\n          return noteGroupOn.apply(null, arguments);\n      }\n    };\n\n    MIDI.noteOff = function (channelId, noteId, delay) {\n      switch (typeof noteId) {\n        case 'number':\n          return noteOff.apply(null, arguments);\n\n        case 'string':\n          break;\n\n        case 'object':\n          return noteGroupOff.apply(null, arguments);\n      }\n    };\n    /** stopAllNotes **/\n\n\n    MIDI.stopAllNotes = function (channelId) {\n      if (isFinite(channelId)) {} else {\n        for (var bufferId = 0, length = _buffers.length; bufferId < length; bufferId++) {\n          _buffers[bufferId].pause();\n        }\n      }\n    };\n    /** connect **/\n\n\n    return new Promise(function (resolve, reject) {\n      var _requests = MIDI.adaptors._requests;\n      var soundfonts = MIDI.Soundfont;\n\n      for (var programId in soundfonts) {\n        var request = _requests[programId] || (_requests[programId] = {});\n        request.loaded = true;\n        request.loading = false;\n      }\n\n      resolve();\n    });\n  };\n  /** helpers **/\n\n\n  function noteOn(channelId, note, velocity, delay) {\n    var timeout;\n    var noteName = MIDI.getNoteName(note);\n\n    if (delay) {\n      timeout = setTimeout(function () {\n        startChannel(channelId, noteName, velocity);\n      }, delay * 1000);\n    } else {\n      startChannel(channelId, noteName, velocity);\n    }\n\n    return {\n      cancel: function () {\n        clearTimeout(timeout);\n      }\n    };\n  }\n\n  ;\n\n  function noteOff(channelId, note, delay) {\n    var timeout; // \t\tvar noteName = MIDI.getNoteName(note); // this sounds bad\n    // \t\tif (delay) {\n    // \t\t\ttimeout = setTimeout(function () {\n    // \t\t\t\tstopChannel(channelId, noteName);\n    // \t\t\t}, delay * 1000)\n    // \t\t} else {\n    // \t\t\tstopChannel(channelId, noteName);\n    // \t\t}\n\n    return {\n      cancel: function () {\n        clearTimeout(timeout);\n      }\n    };\n  }\n\n  ;\n\n  function noteGroupOn(channelId, notes, velocity, delay) {\n    for (var i = 0; i < notes.length; i++) {\n      var note = notes[i];\n      var noteName = MIDI.getNoteName(note);\n\n      if (noteName) {\n        if (delay) {\n          return setTimeout(function () {\n            startChannel(channelId, noteName, velocity);\n          }, delay * 1000);\n        } else {\n          startChannel(channelId, noteName, velocity);\n        }\n      }\n    }\n  }\n\n  ;\n\n  function noteGroupOff(channelId, notes, delay) {\n    for (var i = 0; i < notes.length; i++) {\n      var note = notes[i];\n      var noteName = MIDI.getNoteName(note);\n\n      if (noteName) {\n        if (delay) {\n          return setTimeout(function () {\n            stopChannel(channelId, noteName);\n          }, delay * 1000);\n        } else {\n          stopChannel(channelId, noteName);\n        }\n      }\n    }\n  }\n\n  ;\n\n  function startChannel(channelId, noteName, velocity) {\n    var channel = MIDI.channels[channelId];\n\n    if (channel) {\n      var program = channel.program;\n      var programId = MIDI.getProgram(program).nameId;\n      var sourceId = programId + '' + noteName;\n      var bufferId = (_buffer_nid + 1) % _buffers.length;\n      var soundfont = MIDI.Soundfont[programId];\n\n      if (soundfont) {\n        var source = _buffers[bufferId];\n        source.src = soundfont[noteName];\n        source._channel = channel;\n        source._volume = velocity;\n        source._id = sourceId;\n\n        _apply.volume(source);\n\n        source.play();\n        _buffer_nid = bufferId;\n        _active[bufferId] = source;\n      } else {\n        MIDI.DEBUG && console.log('404', programId);\n      }\n    }\n  }\n\n  ;\n\n  function stopChannel(channelId, noteName) {\n    var channel = MIDI.channels[channelId];\n\n    if (channel) {\n      var program = channel.program;\n      var programId = MIDI.getProgram(program).nameId;\n      var sourceId = programId + '' + noteName;\n\n      for (var i = 0, len = _buffers.length; i < len; i++) {\n        var bufferId = (i + _buffer_nid + 1) % len;\n        var source = _active[bufferId];\n\n        if (source && source._id === sourceId) {\n          _buffers[bufferId].pause();\n\n          _active[bufferId] = null;\n          return;\n        }\n      }\n    }\n  }\n\n  ;\n\n  function defineProperties() {\n    Object.defineProperties(MIDI, {\n      'mute': set('boolean', false, handler('volume')),\n      'volume': set('number', 1.0, handler('volume'))\n    });\n\n    function set(_format, _value, _handler) {\n      return {\n        configurable: true,\n        get: function () {\n          return _value;\n        },\n        set: function (value) {\n          if (typeof value === _format) {\n            _value = value;\n            _handler && _handler();\n          }\n        }\n      };\n    }\n\n    ;\n\n    function handler(type) {\n      return function () {\n        for (var sourceId in _active) {\n          _apply[type](_active[sourceId]);\n        }\n      };\n    }\n\n    ;\n  }\n\n  ;\n}();","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/node_modules/midi/js/adaptors-Audio.js"],"names":["window","Audio","midi","MIDI","adaptors","audio","_buffers","_buffer_nid","_active","_apply","connect","args","adaptor","id","bufferId","defineProperties","volume","source","channel","_channel","mute","_volume","Math","min","max","noteOn","channelId","noteId","velocity","delay","apply","arguments","noteGroupOn","noteOff","noteGroupOff","stopAllNotes","isFinite","length","pause","Promise","resolve","reject","_requests","soundfonts","Soundfont","programId","request","loaded","loading","note","timeout","noteName","getNoteName","setTimeout","startChannel","cancel","clearTimeout","notes","i","stopChannel","channels","program","getProgram","nameId","sourceId","soundfont","src","_id","play","DEBUG","console","log","len","Object","set","handler","_format","_value","_handler","configurable","get","value","type"],"mappings":"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","sourcesContent":["/*\n\t----------------------------------------------------------------------\n\tadaptors-Audio\n\t----------------------------------------------------------------------\n\thttp://dev.w3.org/html5/spec/Overview.html#the-audio-element\n\t----------------------------------------------------------------------\n*/\n\nwindow.Audio && (function () { 'use strict';\n\n\tvar midi = MIDI.adaptors.audio = {};\n\t\n\tvar _buffers = []; // the audio channels\n\tvar _buffer_nid = -1; // current channel\n\tvar _active = []; // programId + noteId that is currently playing in each 'channel', for routing noteOff/chordOff calls\n\tvar _apply = {};\n\n\t/** connect **/\n\tmidi.connect = function (args) {\n\n\t\tMIDI.adaptor.id = 'audio';\n\n\n\t\t/** init **/\n\t\tfor (var bufferId = 0; bufferId < 12; bufferId ++) {\n\t\t\t_buffers[bufferId] || (_buffers[bufferId] = new Audio());\n\t\t}\n\n\n\t\t/** properties **/\n\t\tdefineProperties();\n\n\n\t\t/** volume **/\n\t\t_apply.volume = function (source) {\n\t\t\tvar channel = source._channel;\n\t\t\tif (MIDI.mute || channel.mute) {\n\t\t\t\tsource.volume = 0.0;\n\t\t\t} else {\n\t\t\t\tvar volume = MIDI.volume * channel.volume * source._volume;\n\t\t\t\tsource.volume = Math.min(1.0, Math.max(-1.0, volume * 2.0));\n\t\t\t}\n\t\t};\n\n\n\t\t/** noteOn/Off **/\n\t\tMIDI.noteOn = function (channelId, noteId, velocity, delay) {\n\t\t\tswitch(typeof noteId) {\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn noteOn.apply(null, arguments);\n\t\t\t\tcase 'string':\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn noteGroupOn.apply(null, arguments);\n\t\t\t}\n\t\t};\n\n\t\tMIDI.noteOff = function (channelId, noteId, delay) {\n\t\t\tswitch(typeof noteId) {\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn noteOff.apply(null, arguments);\n\t\t\t\tcase 'string':\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn noteGroupOff.apply(null, arguments);\n\t\t\t}\n\t\t};\n\n\n\t\t/** stopAllNotes **/\n\t\tMIDI.stopAllNotes = function (channelId) {\n\t\t\tif (isFinite(channelId)) {\n\t\t\t\n\t\t\t} else {\n\t\t\t\tfor (var bufferId = 0, length = _buffers.length; bufferId < length; bufferId++) {\n\t\t\t\t\t_buffers[bufferId].pause();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\t\t/** connect **/\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tvar _requests = MIDI.adaptors._requests;\n\t\t\tvar soundfonts = MIDI.Soundfont;\n\t\t\tfor (var programId in soundfonts) {\n\t\t\t\tvar request = _requests[programId] || (_requests[programId] = {});\n\t\t\t\trequest.loaded = true;\n\t\t\t\trequest.loading = false;\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t};\n\n\n\t/** helpers **/\n\tfunction noteOn(channelId, note, velocity, delay) {\n\t\tvar timeout;\n\t\tvar noteName = MIDI.getNoteName(note);\n\t\tif (delay) {\n\t\t\ttimeout = setTimeout(function () {\n\t\t\t\tstartChannel(channelId, noteName, velocity);\n\t\t\t}, delay * 1000);\n\t\t} else {\n\t\t\tstartChannel(channelId, noteName, velocity);\n\t\t}\n\t\treturn {\n\t\t\tcancel: function () {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\t\t};\n\t};\n\n\tfunction noteOff(channelId, note, delay) {\n\t\tvar timeout;\n// \t\tvar noteName = MIDI.getNoteName(note); // this sounds bad\n// \t\tif (delay) {\n// \t\t\ttimeout = setTimeout(function () {\n// \t\t\t\tstopChannel(channelId, noteName);\n// \t\t\t}, delay * 1000)\n// \t\t} else {\n// \t\t\tstopChannel(channelId, noteName);\n// \t\t}\n\t\treturn {\n\t\t\tcancel: function () {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\t\t};\n\t};\n\n\tfunction noteGroupOn(channelId, notes, velocity, delay) {\n\t\tfor (var i = 0; i < notes.length; i ++) {\n\t\t\tvar note = notes[i];\n\t\t\tvar noteName = MIDI.getNoteName(note);\n\t\t\tif (noteName) {\n\t\t\t\tif (delay) {\n\t\t\t\t\treturn setTimeout(function () {\n\t\t\t\t\t\tstartChannel(channelId, noteName, velocity);\n\t\t\t\t\t}, delay * 1000);\n\t\t\t\t} else {\n\t\t\t\t\tstartChannel(channelId, noteName, velocity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction noteGroupOff(channelId, notes, delay) {\n\t\tfor (var i = 0; i < notes.length; i ++) {\n\t\t\tvar note = notes[i];\n\t\t\tvar noteName = MIDI.getNoteName(note);\n\t\t\tif (noteName) {\n\t\t\t\tif (delay) {\n\t\t\t\t\treturn setTimeout(function () {\n\t\t\t\t\t\tstopChannel(channelId, noteName);\n\t\t\t\t\t}, delay * 1000);\n\t\t\t\t} else {\n\t\t\t\t\tstopChannel(channelId, noteName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction startChannel(channelId, noteName, velocity) {\n\t\tvar channel = MIDI.channels[channelId];\n\t\tif (channel) {\n\t\t\tvar program = channel.program;\n\t\t\tvar programId = MIDI.getProgram(program).nameId;\n\t\t\tvar sourceId = programId + '' + noteName;\n\t\t\tvar bufferId = (_buffer_nid + 1) % _buffers.length;\n\t\t\t\n\t\t\tvar soundfont = MIDI.Soundfont[programId];\n\t\t\tif (soundfont) {\n\t\t\t\tvar source = _buffers[bufferId];\n\t\t\t\tsource.src = soundfont[noteName];\n\t\t\t\tsource._channel = channel;\n\t\t\t\tsource._volume = velocity;\n\t\t\t\tsource._id = sourceId;\n\t\t\t\t\n\t\t\t\t_apply.volume(source);\n\t\t\t\t\n\t\t\t\tsource.play();\n\t\t\t\t\n\t\t\t\t_buffer_nid = bufferId;\n\t\t\t\t_active[bufferId] = source;\n\t\t\t} else {\n\t\t\t\tMIDI.DEBUG && console.log('404', programId);\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction stopChannel(channelId, noteName) {\n\t\tvar channel = MIDI.channels[channelId];\n\t\tif (channel) {\n\t\t\tvar program = channel.program;\n\t\t\tvar programId = MIDI.getProgram(program).nameId;\n\t\t\tvar sourceId = programId + '' + noteName;\n\t\t\t\n\t\t\tfor (var i = 0, len = _buffers.length; i < len; i++) {\n\t\t\t\tvar bufferId = (i + _buffer_nid + 1) % len;\n\t\t\t\tvar source = _active[bufferId];\n\t\t\t\tif (source && source._id === sourceId) {\n\t\t\t\t\t_buffers[bufferId].pause();\n\t\t\t\t\t_active[bufferId] = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction defineProperties() {\n\t\tObject.defineProperties(MIDI, {\n\t\t\t'mute': set('boolean', false, handler('volume')),\n\t\t\t'volume': set('number', 1.0, handler('volume'))\n\t\t});\n\t\n\t\tfunction set(_format, _value, _handler) {\n\t\t\treturn {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn _value;\n\t\t\t\t},\n\t\t\t\tset: function (value) {\n\t\t\t\t\tif (typeof value === _format) {\n\t\t\t\t\t\t_value = value;\n\t\t\t\t\t\t_handler && _handler();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfunction handler(type) {\n\t\t\treturn function () {\n\t\t\t\tfor (var sourceId in _active) {\n\t\t\t\t\t_apply[type](_active[sourceId]);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t};\n\n})();"]},"metadata":{},"sourceType":"script"}