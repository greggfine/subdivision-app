{"ast":null,"code":"import { shuffle } from \"lodash\";\nimport startStopTimes from \"../startStopData\"; // array of shuffled objects\n\nconst shuffledStartStopTimes = shuffle(startStopTimes);\nlet count = 0;\nexport const playNextReducer = ( //   state = shuffledStartStopTimes[count],\nstate = {\n  startStopTimes: shuffledStartStopTimes[count],\n  wrongNotation: shuffledStartStopTimes[count + 1]\n}, action) => {\n  switch (action.type) {\n    case \"PLAY_NEXT\":\n      count++;\n      let randCount = Math.floor(Math.random() * shuffledStartStopTimes.length);\n\n      while (randCount === count) {\n        randCount++;\n      } //   return shuffledStartStopTimes[count];\n\n\n      return {\n        startStopTimes: shuffledStartStopTimes[count],\n        wrongNotation: shuffledStartStopTimes[randCount]\n      };\n\n    default:\n      return state;\n  }\n};\n/* \nThe PROBLEM:\n    We want this \"WRONG NOTATION\" to come from a random object in the array\n    Why are we doing this?  \n        a) We don't want to have to create wrongNotations but rather use what we have\n    \n    BUT, if it's a random object in the array, it can't be the same object\nshuffledStartStopTimes[0]\nshuffledStartStopTimes[1]\nshuffledStartStopTimes[2]\n    The number should be a random number that isn't equal to count\n    Math.floor(Math.random() * shuffledStartStopTimes.length)\n*/","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/reducers/playNextReducer.js"],"names":["shuffle","startStopTimes","shuffledStartStopTimes","count","playNextReducer","state","wrongNotation","action","type","randCount","Math","floor","random","length"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;;AACA,MAAMC,sBAAsB,GAAGF,OAAO,CAACC,cAAD,CAAtC;AAEA,IAAIE,KAAK,GAAG,CAAZ;AACA,OAAO,MAAMC,eAAe,GAAG,EAC7B;AACAC,KAAK,GAAG;AACNJ,EAAAA,cAAc,EAAEC,sBAAsB,CAACC,KAAD,CADhC;AAENG,EAAAA,aAAa,EAAEJ,sBAAsB,CAACC,KAAK,GAAG,CAAT;AAF/B,CAFqB,EAM7BI,MAN6B,KAO1B;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACEL,MAAAA,KAAK;AACL,UAAIM,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,sBAAsB,CAACW,MAAlD,CAAhB;;AACA,aAAOJ,SAAS,KAAKN,KAArB,EAA4B;AAC1BM,QAAAA,SAAS;AACV,OALH,CAME;;;AACA,aAAO;AACLR,QAAAA,cAAc,EAAEC,sBAAsB,CAACC,KAAD,CADjC;AAELG,QAAAA,aAAa,EAAEJ,sBAAsB,CAACO,SAAD;AAFhC,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAbJ;AAeD,CAvBM;AAyBP","sourcesContent":["import { shuffle } from \"lodash\";\nimport startStopTimes from \"../startStopData\";\n\n// array of shuffled objects\nconst shuffledStartStopTimes = shuffle(startStopTimes);\n\nlet count = 0;\nexport const playNextReducer = (\n  //   state = shuffledStartStopTimes[count],\n  state = {\n    startStopTimes: shuffledStartStopTimes[count],\n    wrongNotation: shuffledStartStopTimes[count + 1]\n  },\n  action\n) => {\n  switch (action.type) {\n    case \"PLAY_NEXT\":\n      count++;\n      let randCount = Math.floor(Math.random() * shuffledStartStopTimes.length);\n      while (randCount === count) {\n        randCount++;\n      }\n      //   return shuffledStartStopTimes[count];\n      return {\n        startStopTimes: shuffledStartStopTimes[count],\n        wrongNotation: shuffledStartStopTimes[randCount]\n      };\n    default:\n      return state;\n  }\n};\n\n/* \nThe PROBLEM:\n    We want this \"WRONG NOTATION\" to come from a random object in the array\n    Why are we doing this?  \n        a) We don't want to have to create wrongNotations but rather use what we have\n    \n    BUT, if it's a random object in the array, it can't be the same object\nshuffledStartStopTimes[0]\nshuffledStartStopTimes[1]\nshuffledStartStopTimes[2]\n    The number should be a random number that isn't equal to count\n    Math.floor(Math.random() * shuffledStartStopTimes.length)\n*/\n"]},"metadata":{},"sourceType":"module"}