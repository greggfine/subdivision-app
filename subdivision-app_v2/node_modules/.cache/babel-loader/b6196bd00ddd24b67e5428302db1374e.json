{"ast":null,"code":"//    abc_midi_renderer.js: Create the actual format for the midi.\n//    Copyright (C) 2010-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar rendererFactory;\n\n(function () {\n  \"use strict\";\n\n  function setAttributes(elm, attrs) {\n    for (var attr in attrs) if (attrs.hasOwnProperty(attr)) elm.setAttribute(attr, attrs[attr]);\n\n    return elm;\n  }\n\n  function Midi() {\n    this.trackstrings = \"\";\n    this.trackcount = 0;\n    this.noteOnAndChannel = \"%90\";\n  }\n\n  Midi.prototype.setTempo = function (qpm) {\n    //console.log(\"setTempo\",qpm);\n    if (this.trackcount === 0) {\n      this.startTrack();\n      this.track += \"%00%FF%51%03\" + toHex(Math.round(60000000 / qpm), 6);\n      this.endTrack();\n    }\n  };\n\n  Midi.prototype.setGlobalInfo = function (qpm, name) {\n    //console.log(\"setGlobalInfo\",qpm, key, time, name);\n    if (this.trackcount === 0) {\n      this.startTrack();\n      this.track += \"%00%FF%51%03\" + toHex(Math.round(60000000 / qpm), 6); // TODO-PER: we could also store the key and time signatures, something like:\n      //00 FF 5902 03 00 - key signature\n      //00 FF 5804 04 02 30 08 - time signature\n\n      if (name) {\n        this.track += \"%00%FF%03\" + toHex(name.length, 2);\n\n        for (var i = 0; i < name.length; i++) this.track += toHex(name.charCodeAt(i), 2);\n      }\n\n      this.endTrack();\n    }\n  };\n\n  Midi.prototype.startTrack = function () {\n    //console.log(\"startTrack\");\n    this.track = \"\";\n    this.silencelength = 0;\n    this.trackcount++;\n    this.first = true;\n\n    if (this.instrument) {\n      this.setInstrument(this.instrument);\n    }\n  };\n\n  Midi.prototype.endTrack = function () {\n    //console.log(\"endTrack\");\n    var tracklength = toHex(this.track.length / 3 + 4, 8);\n    this.track = \"MTrk\" + tracklength + // track header\n    this.track + '%00%FF%2F%00'; // track end\n\n    this.trackstrings += this.track;\n  };\n\n  Midi.prototype.setInstrument = function (number) {\n    //console.log(\"setInstrument\", number);\n    if (this.track) this.track = \"%00%C0\" + toHex(number, 2) + this.track;else this.track = \"%00%C0\" + toHex(number, 2);\n    this.instrument = number;\n  };\n\n  Midi.prototype.setChannel = function (number) {\n    this.channel = number;\n    this.noteOnAndChannel = \"%9\" + this.channel.toString(16);\n  };\n\n  Midi.prototype.startNote = function (pitch, loudness) {\n    //console.log(\"startNote\", pitch, loudness);\n    this.track += toDurationHex(this.silencelength); // only need to shift by amount of silence (if there is any)\n\n    this.silencelength = 0;\n\n    if (this.first) {\n      this.first = false;\n      this.track += this.noteOnAndChannel;\n    }\n\n    this.track += \"%\" + pitch.toString(16) + toHex(loudness, 2); //note\n  };\n\n  Midi.prototype.endNote = function (pitch, length) {\n    //console.log(\"endNote\", pitch, length);\n    this.track += toDurationHex(this.silencelength + length); // only need to shift by amount of silence (if there is any)\n\n    this.silencelength = 0; //\t\tthis.track += toDurationHex(length); //duration\n\n    this.track += \"%\" + pitch.toString(16) + \"%00\"; //end note\n  };\n\n  Midi.prototype.addRest = function (length) {\n    //console.log(\"addRest\", length);\n    this.silencelength += length;\n  };\n\n  Midi.prototype.getData = function () {\n    return \"data:audio/midi,\" + \"MThd%00%00%00%06%00%01\" + toHex(this.trackcount, 4) + \"%01%e0\" + // header\n    this.trackstrings;\n  };\n\n  Midi.prototype.embed = function (parent, noplayer) {\n    var data = this.getData();\n    var link = setAttributes(document.createElement('a'), {\n      href: data\n    });\n    link.innerHTML = \"download midi\";\n    parent.insertBefore(link, parent.firstChild);\n    if (noplayer) return;\n    var embed = setAttributes(document.createElement('embed'), {\n      src: data,\n      type: 'video/quicktime',\n      controller: 'true',\n      autoplay: 'false',\n      loop: 'false',\n      enablejavascript: 'true',\n      style: 'display:block; height: 20px;'\n    });\n    parent.insertBefore(embed, parent.firstChild);\n  }; // s is assumed to be of even length\n\n\n  function encodeHex(s) {\n    var ret = \"\";\n\n    for (var i = 0; i < s.length; i += 2) {\n      ret += \"%\";\n      ret += s.substr(i, 2);\n    }\n\n    return ret;\n  }\n\n  function toHex(n, padding) {\n    var s = n.toString(16);\n\n    while (s.length < padding) {\n      s = \"0\" + s;\n    }\n\n    return encodeHex(s);\n  }\n\n  function toDurationHex(n) {\n    var res = 0;\n    var a = []; // cut up into 7 bit chunks;\n\n    while (n !== 0) {\n      a.push(n & 0x7F);\n      n = n >> 7;\n    } // join the 7 bit chunks together, all but last chunk get leading 1\n\n\n    for (var i = a.length - 1; i >= 0; i--) {\n      res = res << 8;\n      var bits = a[i];\n\n      if (i !== 0) {\n        bits = bits | 0x80;\n      }\n\n      res = res | bits;\n    }\n\n    var padding = res.toString(16).length;\n    padding += padding % 2;\n    return toHex(res, padding);\n  }\n\n  rendererFactory = function () {\n    return new Midi();\n  };\n})();\n\nmodule.exports = rendererFactory;","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/node_modules/abcjs/src/midi/abc_midi_renderer.js"],"names":["rendererFactory","setAttributes","elm","attrs","attr","hasOwnProperty","setAttribute","Midi","trackstrings","trackcount","noteOnAndChannel","prototype","setTempo","qpm","startTrack","track","toHex","Math","round","endTrack","setGlobalInfo","name","length","i","charCodeAt","silencelength","first","instrument","setInstrument","tracklength","number","setChannel","channel","toString","startNote","pitch","loudness","toDurationHex","endNote","addRest","getData","embed","parent","noplayer","data","link","document","createElement","href","innerHTML","insertBefore","firstChild","src","type","controller","autoplay","loop","enablejavascript","style","encodeHex","s","ret","substr","n","padding","res","a","push","bits","module","exports"],"mappings":"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","sourcesContent":["//    abc_midi_renderer.js: Create the actual format for the midi.\n//    Copyright (C) 2010-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar rendererFactory;\n\n(function() {\n\t\"use strict\";\n\tfunction setAttributes(elm, attrs) {\n\t\tfor (var attr in attrs)\n\t\t\tif (attrs.hasOwnProperty(attr))\n\t\t\t\telm.setAttribute(attr, attrs[attr]);\n\t\treturn elm;\n\t}\n\n\tfunction Midi() {\n\t\tthis.trackstrings = \"\";\n\t\tthis.trackcount = 0;\n\t\tthis.noteOnAndChannel = \"%90\";\n\t}\n\n\tMidi.prototype.setTempo = function(qpm) {\n\t\t//console.log(\"setTempo\",qpm);\n\t\tif (this.trackcount === 0) {\n\t\t\tthis.startTrack();\n\t\t\tthis.track += \"%00%FF%51%03\" + toHex(Math.round(60000000 / qpm), 6);\n\t\t\tthis.endTrack();\n\t\t}\n\t};\n\n\tMidi.prototype.setGlobalInfo = function(qpm, name) {\n\t\t//console.log(\"setGlobalInfo\",qpm, key, time, name);\n\t\tif (this.trackcount === 0) {\n\t\t\tthis.startTrack();\n\t\t\tthis.track += \"%00%FF%51%03\" + toHex(Math.round(60000000 / qpm), 6);\n\t\t\t// TODO-PER: we could also store the key and time signatures, something like:\n\t\t\t//00 FF 5902 03 00 - key signature\n\t\t\t//00 FF 5804 04 02 30 08 - time signature\n\t\t\tif (name) {\n\t\t\t\tthis.track += \"%00%FF%03\" + toHex(name.length, 2);\n\t\t\t\tfor (var i = 0; i < name.length; i++)\n\t\t\t\t\tthis.track += toHex(name.charCodeAt(i), 2);\n\t\t\t}\n\t\t\tthis.endTrack();\n\t\t}\n\t};\n\n\tMidi.prototype.startTrack = function() {\n\t\t//console.log(\"startTrack\");\n\t\tthis.track = \"\";\n\t\tthis.silencelength = 0;\n\t\tthis.trackcount++;\n\t\tthis.first = true;\n\t\tif (this.instrument) {\n\t\t\tthis.setInstrument(this.instrument);\n\t\t}\n\t};\n\n\tMidi.prototype.endTrack = function() {\n\t\t//console.log(\"endTrack\");\n\t\tvar tracklength = toHex(this.track.length / 3 + 4, 8);\n\t\tthis.track = \"MTrk\" + tracklength + // track header\n\t\t\tthis.track +\n\t\t\t'%00%FF%2F%00'; // track end\n\t\tthis.trackstrings += this.track;\n\t};\n\n\tMidi.prototype.setInstrument = function(number) {\n\t\t//console.log(\"setInstrument\", number);\n\t\tif (this.track)\n\t\t\tthis.track = \"%00%C0\" + toHex(number, 2) + this.track;\n\t\telse\n\t\t\tthis.track = \"%00%C0\" + toHex(number, 2);\n\t\tthis.instrument = number;\n\t};\n\n\tMidi.prototype.setChannel = function(number) {\n\t\tthis.channel = number;\n\t\tthis.noteOnAndChannel = \"%9\" + this.channel.toString(16);\n\t};\n\n\tMidi.prototype.startNote = function(pitch, loudness) {\n\t\t//console.log(\"startNote\", pitch, loudness);\n\t\tthis.track += toDurationHex(this.silencelength); // only need to shift by amount of silence (if there is any)\n\t\tthis.silencelength = 0;\n\t\tif (this.first) {\n\t\t\tthis.first = false;\n\t\t\tthis.track += this.noteOnAndChannel;\n\t\t}\n\t\tthis.track += \"%\" + pitch.toString(16) + toHex(loudness, 2); //note\n\t};\n\n\tMidi.prototype.endNote = function(pitch, length) {\n\t\t//console.log(\"endNote\", pitch, length);\n\t\tthis.track += toDurationHex(this.silencelength+length); // only need to shift by amount of silence (if there is any)\n\t\tthis.silencelength = 0;\n//\t\tthis.track += toDurationHex(length); //duration\n\t\tthis.track += \"%\" + pitch.toString(16) + \"%00\";//end note\n\t};\n\n\tMidi.prototype.addRest = function(length) {\n\t\t//console.log(\"addRest\", length);\n\t\tthis.silencelength += length;\n\t};\n\n\tMidi.prototype.getData = function() {\n\t\treturn \"data:audio/midi,\" +\n\t\t\t\"MThd%00%00%00%06%00%01\" + toHex(this.trackcount, 4) + \"%01%e0\" + // header\n\t\t\tthis.trackstrings;\n\t};\n\n\tMidi.prototype.embed = function(parent, noplayer) {\n\n\t\tvar data = this.getData();\n\n\t\tvar link = setAttributes(document.createElement('a'), {\n\t\t\thref: data\n\t\t});\n\t\tlink.innerHTML = \"download midi\";\n\t\tparent.insertBefore(link, parent.firstChild);\n\n\t\tif (noplayer) return;\n\n\t\tvar embed = setAttributes(document.createElement('embed'), {\n\t\t\tsrc: data,\n\t\t\ttype: 'video/quicktime',\n\t\t\tcontroller: 'true',\n\t\t\tautoplay: 'false',\n\t\t\tloop: 'false',\n\t\t\tenablejavascript: 'true',\n\t\t\tstyle: 'display:block; height: 20px;'\n\t\t});\n\t\tparent.insertBefore(embed, parent.firstChild);\n\t};\n\n\t// s is assumed to be of even length\n\tfunction encodeHex(s) {\n\t\tvar ret = \"\";\n\t\tfor (var i = 0; i < s.length; i += 2) {\n\t\t\tret += \"%\";\n\t\t\tret += s.substr(i, 2);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction toHex(n, padding) {\n\t\tvar s = n.toString(16);\n\t\twhile (s.length < padding) {\n\t\t\ts = \"0\" + s;\n\t\t}\n\t\treturn encodeHex(s);\n\t}\n\n\tfunction toDurationHex(n) {\n\t\tvar res = 0;\n\t\tvar a = [];\n\n\t\t// cut up into 7 bit chunks;\n\t\twhile (n !== 0) {\n\t\t\ta.push(n & 0x7F);\n\t\t\tn = n >> 7;\n\t\t}\n\n\t\t// join the 7 bit chunks together, all but last chunk get leading 1\n\t\tfor (var i = a.length - 1; i >= 0; i--) {\n\t\t\tres = res << 8;\n\t\t\tvar bits = a[i];\n\t\t\tif (i !== 0) {\n\t\t\t\tbits = bits | 0x80;\n\t\t\t}\n\t\t\tres = res | bits;\n\t\t}\n\n\t\tvar padding = res.toString(16).length;\n\t\tpadding += padding % 2;\n\n\t\treturn toHex(res, padding);\n\t}\n\n\trendererFactory = function() {\n\t\treturn new Midi();\n\t};\n})();\n\nmodule.exports = rendererFactory;\n"]},"metadata":{},"sourceType":"script"}