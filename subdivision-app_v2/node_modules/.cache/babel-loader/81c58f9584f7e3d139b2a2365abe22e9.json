{"ast":null,"code":"var _jsxFileName = \"/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/components/Answers.jsx\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { shuffle } from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport uuid from \"uuid\";\nimport { handleCorrectAnswer, handleWrongAnswer } from \"../actions/handleAnswers\";\nimport { handlePlayNext } from \"../actions/handlePlayNext\";\nimport { Button } from \"semantic-ui-react\";\nimport Abcjs from \"react-abc\";\nimport success from \"../audio/sfx/success.mp3\";\nimport failure from \"../audio/sfx/failure.mp3\";\n\nconst Answers = ({\n  questions,\n  handleCorrectAnswer,\n  handleWrongAnswer,\n  handlePlayNext,\n  playNext\n}) => {\n  useEffect(() => {\n    const success = document.getElementById(\"success\");\n    const failure = document.getElementById(\"failure\");\n  });\n\n  const generateBtns = () => shuffle([React.createElement(Button, {\n    className: \"notation\",\n    key: uuid(),\n    onClick: () => {\n      handleCorrectAnswer();\n      success.play();\n      handlePlayNext();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Abcjs, {\n    notation: playNext.startStopTimes.notation,\n    parserParams: {} // engraverParams={{ responsive: \"resize\" }}\n    ,\n    renderParams: {\n      viewportHorizontal: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), React.createElement(Button, {\n    key: uuid(),\n    onClick: () => {\n      handleWrongAnswer();\n      failure.play();\n      handlePlayNext();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Abcjs, {\n    notation: playNext.wrongNotation.notation,\n    parserParams: {},\n    renderParams: {\n      viewportHorizontal: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))]);\n\n  return React.createElement(\"div\", {\n    className: \"answers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"audio\", {\n    src: success,\n    id: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"audio\", {\n    src: failure,\n    id: \"failure\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"answer-btns\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, generateBtns()));\n};\n\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  playNext: state.playNext\n});\n\nexport default connect(mapStateToProps, {\n  handleCorrectAnswer,\n  handleWrongAnswer,\n  handlePlayNext\n})(Answers);\nAnswers.propTypes = {\n  handleCorrectAnswer: PropTypes.func,\n  handleWrongAnswer: PropTypes.func,\n  handlePlayNext: PropTypes.func\n};\n/* \nStart Game, what happends onClick----   startGame === true\nWe've got \"QUESTIONS\" which autoPlays audio\nNow we've got a shuffled array of objects with start,stop times, and a notation\nWe need to display 2 DIFFERENT Notations, 1 BEING Correct\n*/","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/src/components/Answers.jsx"],"names":["React","useEffect","connect","shuffle","PropTypes","uuid","handleCorrectAnswer","handleWrongAnswer","handlePlayNext","Button","Abcjs","success","failure","Answers","questions","playNext","document","getElementById","generateBtns","play","startStopTimes","notation","viewportHorizontal","wrongNotation","mapStateToProps","state","propTypes","func"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { shuffle } from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport uuid from \"uuid\";\nimport {\n  handleCorrectAnswer,\n  handleWrongAnswer\n} from \"../actions/handleAnswers\";\nimport { handlePlayNext } from \"../actions/handlePlayNext\";\nimport { Button } from \"semantic-ui-react\";\nimport Abcjs from \"react-abc\";\nimport success from \"../audio/sfx/success.mp3\";\nimport failure from \"../audio/sfx/failure.mp3\";\n\nconst Answers = ({\n  questions,\n  handleCorrectAnswer,\n  handleWrongAnswer,\n  handlePlayNext,\n  playNext\n}) => {\n  useEffect(() => {\n    const success = document.getElementById(\"success\");\n    const failure = document.getElementById(\"failure\");\n  });\n  const generateBtns = () =>\n    shuffle([\n      <Button\n        className=\"notation\"\n        key={uuid()}\n        onClick={() => {\n          handleCorrectAnswer();\n          success.play();\n          handlePlayNext();\n        }}\n      >\n        <Abcjs\n          notation={playNext.startStopTimes.notation}\n          parserParams={{}}\n          // engraverParams={{ responsive: \"resize\" }}\n          renderParams={{ viewportHorizontal: true }}\n        />\n      </Button>,\n      <Button\n        key={uuid()}\n        onClick={() => {\n          handleWrongAnswer();\n          failure.play();\n          handlePlayNext();\n        }}\n      >\n        <Abcjs\n          notation={playNext.wrongNotation.notation}\n          parserParams={{}}\n          renderParams={{ viewportHorizontal: true }}\n        />\n      </Button>\n    ]);\n  return (\n    <div className=\"answers\">\n      <audio src={success} id=\"success\"></audio>\n      <audio src={failure} id=\"failure\"></audio>\n      <div className=\"answer-btns\">{generateBtns()}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  playNext: state.playNext\n});\n\nexport default connect(mapStateToProps, {\n  handleCorrectAnswer,\n  handleWrongAnswer,\n  handlePlayNext\n})(Answers);\n\nAnswers.propTypes = {\n  handleCorrectAnswer: PropTypes.func,\n  handleWrongAnswer: PropTypes.func,\n  handlePlayNext: PropTypes.func\n};\n\n/* \nStart Game, what happends onClick----   startGame === true\nWe've got \"QUESTIONS\" which autoPlays audio\nNow we've got a shuffled array of objects with start,stop times, and a notation\nWe need to display 2 DIFFERENT Notations, 1 BEING Correct\n*/\n"]},"metadata":{},"sourceType":"module"}