{"ast":null,"code":"//    abc_midi_create.js: Turn a linear series of events into a series of MIDI commands.\n//    Copyright (C) 2010-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// We input a set of voices, but the notes are still complex. This pass changes the logical definitions\n// of the grace notes, decorations, ties, triplets, rests, transpositions, keys, and accidentals into actual note durations.\n// It also extracts guitar chords to a separate voice and resolves their rhythm.\nvar flatten;\n\n(function () {\n  \"use strict\";\n\n  var barAccidentals;\n  var accidentals;\n  var transpose;\n  var bagpipes;\n  var multiplier;\n  var tracks;\n  var startingTempo;\n  var startingMeter;\n  var tempoChangeFactor = 1;\n  var instrument; // var channel;\n\n  var currentTrack;\n  var pitchesTied;\n  var lastNoteDurationPosition;\n  var meter = {\n    num: 4,\n    den: 4\n  };\n  var chordTrack;\n  var chordTrackFinished;\n  var chordChannel;\n  var chordInstrument = 0;\n  var drumInstrument = 128;\n  var currentChords;\n  var lastChord;\n  var barBeat;\n  var drumTrack;\n  var drumTrackFinished;\n  var drumDefinition = {};\n  var normalBreakBetweenNotes = 1.0 / 128; // a 128th note of silence between notes for articulation.\n\n  flatten = function (voices, options) {\n    if (!options) options = {};\n    barAccidentals = [];\n    accidentals = [0, 0, 0, 0, 0, 0, 0];\n    bagpipes = false;\n    multiplier = 1;\n    tracks = [];\n    startingTempo = undefined;\n    startingMeter = undefined;\n    tempoChangeFactor = 1;\n    instrument = undefined; // channel = undefined;\n\n    currentTrack = undefined;\n    pitchesTied = {}; // For resolving chords.\n\n    meter = {\n      num: 4,\n      den: 4\n    };\n    chordTrack = [];\n    chordChannel = voices.length; // first free channel for chords\n\n    chordTrackFinished = false;\n    currentChords = [];\n    lastChord = undefined;\n    barBeat = 0; // For the drum/metronome track.\n\n    drumTrack = [];\n    drumTrackFinished = false;\n    drumDefinition = {};\n\n    for (var i = 0; i < voices.length; i++) {\n      transpose = 0;\n      lastNoteDurationPosition = -1;\n      var voice = voices[i];\n      currentTrack = [{\n        cmd: 'program',\n        channel: i,\n        instrument: instrument ? instrument : 0\n      }];\n      pitchesTied = {};\n\n      for (var j = 0; j < voice.length; j++) {\n        var element = voice[j];\n\n        switch (element.el_type) {\n          case \"note\":\n            writeNote(element, options.voicesOff);\n            break;\n\n          case \"key\":\n            accidentals = setKeySignature(element);\n            break;\n\n          case \"meter\":\n            if (!startingMeter) startingMeter = element;\n            meter = element;\n            break;\n\n          case \"tempo\":\n            if (!startingTempo) startingTempo = element.qpm;else tempoChangeFactor = element.qpm ? startingTempo / element.qpm : 1;\n            break;\n\n          case \"transpose\":\n            transpose = element.transpose;\n            break;\n\n          case \"bar\":\n            if (chordTrack.length > 0 && i === 0) {\n              resolveChords();\n              currentChords = [];\n            }\n\n            barBeat = 0;\n            barAccidentals = [];\n            if (i === 0) // Only write the drum part on the first voice so that it is not duplicated.\n              writeDrum(voices.length + 1);\n            break;\n\n          case \"bagpipes\":\n            bagpipes = true;\n            break;\n\n          case \"instrument\":\n            if (instrument === undefined) instrument = element.program;\n            currentTrack[0].instrument = element.program;\n            break;\n\n          case \"channel\":\n            // \tif (channel === undefined)\n            // \t\tchannel = element.channel;\n            // \tcurrentTrack[0].channel = element.channel;\n            break;\n\n          case \"drum\":\n            drumDefinition = normalizeDrumDefinition(element.params);\n            break;\n\n          default:\n            // This should never happen\n            console.log(\"MIDI creation. Unknown el_type: \" + element.el_type + \"\\n\"); // jshint ignore:line\n\n            break;\n        }\n      }\n\n      tracks.push(currentTrack);\n      if (chordTrack.length > 0) // Don't do chords on more than one track, so turn off chord detection after we create it.\n        chordTrackFinished = true;\n      if (drumTrack.length > 0) // Don't do drums on more than one track, so turn off drum after we create it.\n        drumTrackFinished = true;\n    }\n\n    if (chordTrack.length > 0) tracks.push(chordTrack);\n    if (drumTrack.length > 0) tracks.push(drumTrack); // Adjust the tempo according to the meter. The rules are this:\n    // 1) If the denominator is 2 or 4, then always make a beat be the denominator.\n    //\n    // 2) If the denominator is 8 or 16, then:\n    // a) If the numerator is divisible by 3, the beat is 3*denominator.\n    // b) Otherwise the beat is the denominator.\n    //\n    // 3) If the denominator is anything else, then don't worry about it because it doesn't make sense. Don't modify it and hope for the best.\n    //\n    // Right now, the startingTempo is calculated for a quarter note, so modify it if necessary.\n    // var num = startingMeter ? parseInt(startingMeter.num, 10) : meter.num;\n    // var den = startingMeter ? parseInt(startingMeter.den, 10) : meter.den;\n    // if (den === 2)\n    // \tstartingTempo *= 2;\n    // else if (den === 8) {\n    // \tif (parseInt(num, 10) % 3 === 0)\n    // \t\tstartingTempo *= 3/2;\n    // \telse\n    // \t\tstartingTempo /= 2;\n    // } else if (den === 16) {\n    // \tif (num % 3 === 0)\n    // \t\tstartingTempo *= 3/4;\n    // \telse\n    // \t\tstartingTempo /= 4;\n    // }\n\n    return {\n      tempo: startingTempo,\n      instrument: instrument,\n      tracks: tracks\n    };\n  }; //\n  // The algorithm for chords is:\n  // - The chords are done in a separate track.\n  // - If there are notes before the first chord, then put that much silence to start the track.\n  // - The pattern of chord expression depends on the meter, and how many chords are in a measure.\n  // - There is a possibility that a measure will have an incorrect number of beats, if that is the case, then\n  // start the pattern anew on the next measure number.\n  // - If a chord root is not A-G, then ignore it as if the chord wasn't there at all.\n  // - If a chord modification isn't in our supported list, change it to a major triad.\n  //\n  // - If there is only one chord in a measure:\n  //\t\t- If 2/4, play root chord\n  //\t\t- If cut time, play root(1) chord(3)\n  //\t\t- If 3/4, play root chord chord\n  //\t\t- If 4/4 or common time, play root chord fifth chord\n  //\t\t- If 6/8, play root(1) chord(3) fifth(4) chord(6)\n  //\t\t- For any other meter, play the full chord on each beat. (TODO-PER: expand this as more support is added.)\n  //\n  //\t- If there is a chord specified that is not on a beat, move it earlier to the previous beat, unless there is already a chord on that beat.\n  //\t- Otherwise, move it later, unless there is already a chord on that beat.\n  // \t- Otherwise, ignore it. (TODO-PER: expand this as more support is added.)\n  //\n  // - If there is a chord on the second beat, play a chord for the first beat instead of a bass note.\n  // - Likewise, if there is a chord on the fourth beat of 4/4, play a chord on the third beat instead of a bass note.\n  //\n\n\n  var breakSynonyms = ['break', '(break)', 'no chord', 'n.c.', 'tacet'];\n\n  function findChord(elem) {\n    // TODO-PER: Just using the first chord if there are more than one.\n    if (chordTrackFinished || !elem.chord || elem.chord.length === 0) return null; // Return the first annotation that is a regular chord: that is, it is in the default place or is a recognized \"tacit\" phrase.\n\n    for (var i = 0; i < elem.chord.length; i++) {\n      var ch = elem.chord[i];\n      if (ch.position === 'default') return ch.name;\n      if (breakSynonyms.indexOf(ch.name.toLowerCase()) >= 0) return 'break';\n    }\n\n    return null;\n  }\n\n  function timeFromStart() {\n    var distance = 0;\n\n    for (var ct = 0; ct < currentTrack.length; ct++) {\n      if (currentTrack[ct].cmd === 'move') distance += currentTrack[ct].duration;\n    }\n\n    return distance;\n  }\n\n  function writeNote(elem, voiceOff) {\n    //\n    // Create a series of note events to append to the current track.\n    // The output event is one of: { pitchStart: pitch_in_abc_units, volume: from_1_to_64 }\n    // { pitchStop: pitch_in_abc_units }\n    // { moveTime: duration_in_abc_units }\n    // If there are guitar chords, then they are put in a separate track, but they have the same format.\n    //\n    var velocity = voiceOff ? 0 : 64;\n    var chord = findChord(elem);\n\n    if (chord) {\n      var c = interpretChord(chord); // If this isn't a recognized chord, just completely ignore it.\n\n      if (c) {\n        // If we ever have a chord in this voice, then we add the chord track.\n        // However, if there are chords on more than one voice, then just use the first voice.\n        if (chordTrack.length === 0) {\n          chordTrack.push({\n            cmd: 'program',\n            channel: chordChannel,\n            instrument: chordInstrument\n          }); // need to figure out how far in time the chord started: if there are pickup notes before the chords start, we need pauses.\n\n          var distance = timeFromStart();\n          if (distance > 0) chordTrack.push({\n            cmd: 'move',\n            duration: distance * tempoChangeFactor\n          });\n        }\n\n        lastChord = c;\n        currentChords.push({\n          chord: lastChord,\n          beat: barBeat\n        });\n      }\n    }\n\n    if (elem.startTriplet) {\n      multiplier = elem.tripletMultiplier;\n    }\n\n    var duration = (elem.durationClass ? elem.durationClass : elem.duration) * multiplier;\n    barBeat += duration; // if there are grace notes, then also play them.\n    // I'm not sure there is an exact rule for the length of the notes. My rule, unless I find\n    // a better one is: the grace notes cannot take more than 1/2 of the main note's value.\n    // A grace note (of 1/8 note duration) takes 1/8 of the main note's value.\n\n    var graces;\n\n    if (elem.gracenotes) {\n      // There are two cases: if this is bagpipe, the grace notes are played on the beat with the current note.\n      // Normally, the grace notes would be played before the beat. (If this is the first note in the track, however, then it is played on the current beat.)\n      // The reason for the exception on the first note is that it would otherwise move the whole track in time and would affect all the other tracks.\n      var stealFromCurrent = bagpipes || lastNoteDurationPosition < 0 || currentTrack.length === 0;\n      var stealFromDuration = stealFromCurrent ? duration : currentTrack[lastNoteDurationPosition].duration;\n      graces = processGraceNotes(elem.gracenotes, stealFromDuration);\n\n      if (!bagpipes) {\n        duration = writeGraceNotes(graces, stealFromCurrent, duration, null, velocity);\n      }\n    }\n\n    if (elem.pitches) {\n      if (graces && bagpipes) {\n        // If it is bagpipes, then the graces are played with the note. If the grace has the same pitch as the note, then we just skip it.\n        duration = writeGraceNotes(graces, true, duration, null, velocity);\n      }\n\n      var pitches = [];\n\n      for (var i = 0; i < elem.pitches.length; i++) {\n        var note = elem.pitches[i];\n        var actualPitch = adjustPitch(note);\n        pitches.push({\n          pitch: actualPitch,\n          startTie: note.startTie\n        }); // TODO-PER: should the volume vary depending on whether it is on a beat or measure start?\n\n        if (!pitchesTied['' + actualPitch]) // If this is the second note of a tie, we don't start it again.\n          currentTrack.push({\n            cmd: 'start',\n            pitch: actualPitch,\n            volume: velocity\n          });\n        if (note.startTie) pitchesTied['' + actualPitch] = true;else if (note.endTie) pitchesTied['' + actualPitch] = false;\n      }\n\n      var thisBreakBetweenNotes = normalBreakBetweenNotes;\n      var soundDuration = duration - normalBreakBetweenNotes;\n\n      if (soundDuration < 0) {\n        soundDuration = 0;\n        thisBreakBetweenNotes = 0;\n      }\n\n      currentTrack.push({\n        cmd: 'move',\n        duration: soundDuration * tempoChangeFactor\n      });\n      lastNoteDurationPosition = currentTrack.length - 1;\n\n      for (var ii = 0; ii < pitches.length; ii++) {\n        if (!pitchesTied['' + pitches[ii].pitch]) currentTrack.push({\n          cmd: 'stop',\n          pitch: pitches[ii].pitch\n        });\n      }\n\n      currentTrack.push({\n        cmd: 'move',\n        duration: thisBreakBetweenNotes * tempoChangeFactor\n      });\n    } else if (elem.rest) {\n      currentTrack.push({\n        cmd: 'move',\n        duration: duration * tempoChangeFactor\n      });\n    }\n\n    if (elem.endTriplet) {\n      multiplier = 1;\n    }\n  }\n\n  var scale = [0, 2, 4, 5, 7, 9, 11];\n\n  function adjustPitch(note) {\n    if (note.midipitch) return note.midipitch - 60;\n    var pitch = note.pitch;\n\n    if (note.accidental) {\n      switch (note.accidental) {\n        // change that pitch (not other octaves) for the rest of the bar\n        case \"sharp\":\n          barAccidentals[pitch] = 1;\n          break;\n\n        case \"flat\":\n          barAccidentals[pitch] = -1;\n          break;\n\n        case \"natural\":\n          barAccidentals[pitch] = 0;\n          break;\n\n        case \"dblsharp\":\n          barAccidentals[pitch] = 2;\n          break;\n\n        case \"dblflat\":\n          barAccidentals[pitch] = -2;\n          break;\n      }\n    }\n\n    var actualPitch = extractOctave(pitch) * 12 + scale[extractNote(pitch)];\n\n    if (barAccidentals[pitch] !== undefined) {\n      actualPitch += barAccidentals[pitch];\n    } else {\n      // use normal accidentals\n      actualPitch += accidentals[extractNote(pitch)];\n    }\n\n    actualPitch += transpose;\n    return actualPitch;\n  }\n\n  function setKeySignature(elem) {\n    var accidentals = [0, 0, 0, 0, 0, 0, 0];\n    if (!elem.accidentals) return accidentals;\n\n    for (var i = 0; i < elem.accidentals.length; i++) {\n      var acc = elem.accidentals[i];\n      var d = acc.acc === \"sharp\" ? 1 : acc.acc === \"natural\" ? 0 : -1;\n      var lowercase = acc.note.toLowerCase();\n      var note = extractNote(lowercase.charCodeAt(0) - 'c'.charCodeAt(0));\n      accidentals[note] += d;\n    }\n\n    return accidentals;\n  }\n\n  var graceDivider = 8; // This is the fraction of a note that the grace represents. That is, if this is 2, then a grace note of 1/16 would be a 1/32.\n\n  function processGraceNotes(graces, companionDuration) {\n    var graceDuration = 0;\n    var ret = [];\n    var grace;\n\n    for (var g = 0; g < graces.length; g++) {\n      grace = graces[g];\n      graceDuration += grace.duration;\n    }\n\n    graceDuration = graceDuration / graceDivider;\n    var multiplier = graceDuration * 2 > companionDuration ? companionDuration / (graceDuration * 2) : 1;\n\n    for (g = 0; g < graces.length; g++) {\n      grace = graces[g];\n      var pitch = grace.midipitch ? grace.midipitch - 60 : grace.pitch;\n      ret.push({\n        pitch: pitch,\n        duration: grace.duration / graceDivider * multiplier\n      });\n    }\n\n    return ret;\n  }\n\n  function writeGraceNotes(graces, stealFromCurrent, duration, skipNote, velocity) {\n    for (var g = 0; g < graces.length; g++) {\n      var gp = adjustPitch(graces[g]);\n      if (gp !== skipNote) currentTrack.push({\n        cmd: 'start',\n        pitch: gp,\n        volume: velocity\n      });\n      currentTrack.push({\n        cmd: 'move',\n        duration: graces[g].duration * tempoChangeFactor\n      });\n      if (gp !== skipNote) currentTrack.push({\n        cmd: 'stop',\n        pitch: gp\n      });\n      if (!stealFromCurrent) currentTrack[lastNoteDurationPosition].duration -= graces[g].duration;\n      duration -= graces[g].duration;\n    }\n\n    return duration;\n  }\n\n  function extractOctave(pitch) {\n    return Math.floor(pitch / 7);\n  }\n\n  function extractNote(pitch) {\n    pitch = pitch % 7;\n    if (pitch < 0) pitch += 7;\n    return pitch;\n  }\n\n  var basses = {\n    'A': -27,\n    'B': -25,\n    'C': -24,\n    'D': -22,\n    'E': -20,\n    'F': -19,\n    'G': -17\n  };\n\n  function interpretChord(name) {\n    // chords have the format:\n    // [root][acc][modifier][/][bass][acc]\n    // (The chord might be surrounded by parens. Just ignore them.)\n    // root must be present and must be from A-G.\n    // acc is optional and can be # or b\n    // The modifier can be a wide variety of things, like \"maj7\". As they are discovered, more are supported here.\n    // If there is a slash, then there is a bass note, which can be from A-G, with an optional acc.\n    // If the root is unrecognized, then \"undefined\" is returned and there is no chord.\n    // If the modifier is unrecognized, a major triad is returned.\n    // If the bass notes is unrecognized, it is ignored.\n    if (name.length === 0) return undefined;\n    if (name === 'break') return {\n      chick: []\n    };\n    var root = name.substring(0, 1);\n\n    if (root === '(') {\n      name = name.substring(1, name.length - 2);\n      if (name.length === 0) return undefined;\n      root = name.substring(0, 1);\n    }\n\n    var bass = basses[root];\n    if (!bass) // If the bass note isn't listed, then this was an unknown root. Only A-G are accepted.\n      return undefined;\n    bass += transpose;\n    var bass2 = bass - 5; // The alternating bass is a 4th below\n\n    var chick;\n    if (name.length === 1) chick = chordNotes(bass, '');\n    var remaining = name.substring(1);\n    var acc = remaining.substring(0, 1);\n\n    if (acc === 'b' || acc === '♭') {\n      bass--;\n      bass2--;\n      remaining = remaining.substring(1);\n    } else if (acc === '#' || acc === '♯') {\n      bass++;\n      bass2++;\n      remaining = remaining.substring(1);\n    }\n\n    var arr = remaining.split('/');\n    chick = chordNotes(bass, arr[0]);\n\n    if (arr.length === 2) {\n      var explicitBass = basses[arr[1]];\n\n      if (explicitBass) {\n        bass = basses[arr[1]] + transpose;\n        bass2 = bass;\n      }\n    }\n\n    return {\n      boom: bass,\n      boom2: bass2,\n      chick: chick\n    };\n  }\n\n  var chordIntervals = {\n    'M': [0, 4, 7],\n    '6': [0, 4, 7, 9],\n    '7': [0, 4, 7, 10],\n    '+7': [0, 4, 8, 10],\n    'aug7': [0, 4, 8, 10],\n    'maj7': [0, 4, 7, 11],\n    '∆7': [0, 4, 7, 11],\n    '9': [0, 4, 7, 10, 14],\n    '11': [0, 4, 7, 10, 14, 16],\n    '13': [0, 4, 7, 10, 14, 18],\n    '+': [0, 4, 8],\n    '7#5': [0, 4, 8, 10],\n    '7+5': [0, 4, 8, 10],\n    '7b9': [0, 4, 7, 10, 13],\n    '7b5': [0, 4, 6, 10],\n    '9#5': [0, 4, 8, 10, 14],\n    '9+5': [0, 4, 8, 10, 14],\n    'm': [0, 3, 7],\n    '-': [0, 3, 7],\n    'm6': [0, 3, 7, 9],\n    '-6': [0, 3, 7, 9],\n    'm7': [0, 3, 7, 10],\n    '-7': [0, 3, 7, 10],\n    'dim': [0, 3, 6],\n    'dim7': [0, 3, 6, 9],\n    '°7': [0, 3, 6, 9],\n    'ø7': [0, 3, 6, 10],\n    '7sus4': [0, 5, 7, 10],\n    'm7sus4': [0, 5, 7, 10],\n    'sus4': [0, 5, 7]\n  };\n\n  function chordNotes(bass, modifier) {\n    var intervals = chordIntervals[modifier];\n    if (!intervals) intervals = chordIntervals.M;\n    bass += 12; // the chord is an octave above the bass note.\n\n    var notes = [];\n\n    for (var i = 0; i < intervals.length; i++) {\n      notes.push(bass + intervals[i]);\n    }\n\n    return notes;\n  }\n\n  function writeBoom(boom, beatLength) {\n    // undefined means there is a stop time.\n    if (boom !== undefined) chordTrack.push({\n      cmd: 'start',\n      pitch: boom,\n      volume: 64\n    });\n    chordTrack.push({\n      cmd: 'move',\n      duration: beatLength / 2 * tempoChangeFactor\n    });\n    if (boom !== undefined) chordTrack.push({\n      cmd: 'stop',\n      pitch: boom\n    });\n    chordTrack.push({\n      cmd: 'move',\n      duration: beatLength / 2 * tempoChangeFactor\n    });\n  }\n\n  function writeChick(chick, beatLength) {\n    for (var c = 0; c < chick.length; c++) chordTrack.push({\n      cmd: 'start',\n      pitch: chick[c],\n      volume: 48\n    });\n\n    chordTrack.push({\n      cmd: 'move',\n      duration: beatLength / 2 * tempoChangeFactor\n    });\n\n    for (c = 0; c < chick.length; c++) chordTrack.push({\n      cmd: 'stop',\n      pitch: chick[c]\n    });\n\n    chordTrack.push({\n      cmd: 'move',\n      duration: beatLength / 2 * tempoChangeFactor\n    });\n  }\n\n  var rhythmPatterns = {\n    \"2/2\": ['boom', 'chick'],\n    \"2/4\": ['boom', 'chick'],\n    \"3/4\": ['boom', 'chick', 'chick'],\n    \"4/4\": ['boom', 'chick', 'boom2', 'chick'],\n    \"5/4\": ['boom', 'chick', 'chick', 'boom2', 'chick'],\n    \"6/8\": ['boom', '', 'chick', 'boom2', '', 'chick'],\n    \"9/8\": ['boom', '', 'chick', 'boom2', '', 'chick', 'boom2', '', 'chick'],\n    \"12/8\": ['boom', '', 'chick', 'boom2', '', 'chick', 'boom2', '', 'chick', 'boom2', '', 'chick']\n  };\n\n  function resolveChords() {\n    var num = meter.num;\n    var den = meter.den;\n    var beatLength = 1 / den;\n    var pattern = rhythmPatterns[num + '/' + den];\n    var thisMeasureLength = parseInt(num, 10) / parseInt(den, 10); // See if this is a full measure: unfortunately, with triplets, there isn't an exact match, what with the floating point, so we just see if it is \"close\".\n\n    var portionOfAMeasure = Math.abs(thisMeasureLength - barBeat);\n\n    if (!pattern || portionOfAMeasure > 0.0078125) {\n      // If it is an unsupported meter, or this isn't a full bar, just chick on each beat.\n      pattern = [];\n      var beatsPresent = barBeat / beatLength;\n\n      for (var p = 0; p < beatsPresent; p++) pattern.push(\"chick\");\n    }\n\n    if (currentChords.length === 0) {\n      // there wasn't a new chord this measure, so use the last chord declared.\n      currentChords.push({\n        beat: 0,\n        chord: lastChord\n      });\n    }\n\n    if (currentChords[0].beat !== 0 && lastChord) {\n      // this is the case where there is a chord declared in the measure, but not on its first beat.\n      currentChords.unshift({\n        beat: 0,\n        chord: lastChord\n      });\n    }\n\n    if (currentChords.length === 1) {\n      for (var m = 0; m < pattern.length; m++) {\n        switch (pattern[m]) {\n          case 'boom':\n            writeBoom(currentChords[0].chord.boom, beatLength);\n            break;\n\n          case 'boom2':\n            writeBoom(currentChords[0].chord.boom2, beatLength);\n            break;\n\n          case 'chick':\n            writeChick(currentChords[0].chord.chick, beatLength);\n            break;\n\n          case '':\n            chordTrack.push({\n              cmd: 'move',\n              duration: beatLength * tempoChangeFactor\n            });\n            break;\n        }\n      }\n\n      return;\n    } // If we are here it is because more than one chord was declared in the measure, so we have to sort out what chord goes where.\n    // First, normalize the chords on beats.\n\n\n    var beats = {};\n\n    for (var i = 0; i < currentChords.length; i++) {\n      var cc = currentChords[i];\n      var beat = Math.floor(cc.beat / beatLength); // now all the beats are integers, there may be\n\n      beats['' + beat] = cc;\n    } // - If there is a chord on the second beat, play a chord for the first beat instead of a bass note.\n    // - Likewise, if there is a chord on the fourth beat of 4/4, play a chord on the third beat instead of a bass note.\n\n\n    for (var m2 = 0; m2 < pattern.length; m2++) {\n      var thisChord;\n      if (beats['' + m2]) thisChord = beats['' + m2];\n\n      switch (pattern[m2]) {\n        case 'boom':\n          if (beats['' + (m2 + 1)]) // If there is not a chord change on the next beat, play a bass note.\n            writeChick(thisChord.chord.chick, beatLength);else writeBoom(thisChord.chord.boom, beatLength);\n          break;\n\n        case 'boom2':\n          if (beats['' + (m2 + 1)]) writeChick(thisChord.chord.chick, beatLength);else writeBoom(thisChord.chord.boom2, beatLength);\n          break;\n\n        case 'chick':\n          writeChick(thisChord.chord.chick, beatLength);\n          break;\n\n        case '':\n          if (beats['' + m2]) // If there is an explicit chord on this beat, play it.\n            writeChick(thisChord.chord.chick, beatLength);else chordTrack.push({\n            cmd: 'move',\n            duration: beatLength * tempoChangeFactor\n          });\n          break;\n      }\n    }\n  }\n\n  function normalizeDrumDefinition(params) {\n    // Be very strict with the drum definition. If anything is not perfect,\n    // just turn the drums off.\n    // Perhaps all of this logic belongs in the parser instead.\n    if (params.pattern.length === 0 || params.on === false) return {\n      on: false\n    };\n    var str = params.pattern[0];\n    var events = [];\n    var event = \"\";\n    var totalPlay = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      if (str[i] === 'd') totalPlay++;\n\n      if (str[i] === 'd' || str[i] === 'z') {\n        if (event.length !== 0) {\n          events.push(event);\n          event = str[i];\n        } else event = event + str[i];\n      } else {\n        if (event.length === 0) {\n          // there was an error: the string should have started with d or z\n          return {\n            on: false\n          };\n        }\n\n        event = event + str[i];\n      }\n    }\n\n    if (event.length !== 0) events.push(event); // Now the events array should have one item per event.\n    // There should be two more params for each event: the volume and the pitch.\n\n    if (params.pattern.length !== totalPlay * 2 + 1) return {\n      on: false\n    };\n    var ret = {\n      on: true,\n      bars: params.bars,\n      pattern: []\n    };\n    var beatLength = 1 / meter.den;\n    var playCount = 0;\n\n    for (var j = 0; j < events.length; j++) {\n      event = events[j];\n      var len = 1;\n      var div = false;\n      var num = 0;\n\n      for (var k = 1; k < event.length; k++) {\n        switch (event[k]) {\n          case \"/\":\n            if (num !== 0) len *= num;\n            num = 0;\n            div = true;\n            break;\n\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\":\n            num = num * 10 + event[k];\n            break;\n\n          default:\n            return {\n              on: false\n            };\n        }\n      }\n\n      if (div) {\n        if (num === 0) num = 2; // a slash by itself is interpreted as \"/2\"\n\n        len /= num;\n      } else if (num) len *= num;\n\n      if (event[0] === 'd') {\n        ret.pattern.push({\n          len: len * beatLength,\n          pitch: params.pattern[1 + playCount],\n          velocity: params.pattern[1 + playCount + totalPlay]\n        });\n        playCount++;\n      } else ret.pattern.push({\n        len: len * beatLength,\n        pitch: null\n      });\n    } // Now normalize the pattern to cover the correct number of measures. The note lengths passed are relative to each other and need to be scaled to fit a measure.\n\n\n    var totalTime = 0;\n    var measuresPerBeat = meter.num / meter.den;\n\n    for (var ii = 0; ii < ret.pattern.length; ii++) totalTime += ret.pattern[ii].len;\n\n    var numBars = params.bars ? params.bars : 1;\n    var factor = totalTime / numBars / measuresPerBeat;\n\n    for (ii = 0; ii < ret.pattern.length; ii++) ret.pattern[ii].len = ret.pattern[ii].len / factor;\n\n    return ret;\n  }\n\n  function drumBeat(pitch, soundLength, volume) {\n    drumTrack.push({\n      cmd: 'start',\n      pitch: pitch - 60,\n      volume: volume\n    });\n    drumTrack.push({\n      cmd: 'move',\n      duration: soundLength\n    });\n    drumTrack.push({\n      cmd: 'stop',\n      pitch: pitch - 60\n    });\n  }\n\n  function writeDrum(channel) {\n    if (drumTrack.length === 0 && !drumDefinition.on) return;\n    var measureLen = meter.num / meter.den;\n\n    if (drumTrack.length === 0) {\n      drumTrack.push({\n        cmd: 'program',\n        channel: channel,\n        instrument: drumInstrument\n      }); // need to figure out how far in time the bar started: if there are pickup notes before the chords start, we need pauses.\n\n      var distance = timeFromStart();\n\n      if (distance > 0 && distance < measureLen - 0.01) {\n        // because of floating point, adding the notes might not exactly equal the measure size.\n        drumTrack.push({\n          cmd: 'move',\n          duration: distance * tempoChangeFactor\n        });\n        return;\n      }\n    }\n\n    if (!drumDefinition.on) {\n      // this is the case where there has been a drum track, but it was specifically turned off.\n      drumTrack.push({\n        cmd: 'move',\n        duration: measureLen * tempoChangeFactor\n      });\n      return;\n    }\n\n    for (var i = 0; i < drumDefinition.pattern.length; i++) {\n      var len = drumDefinition.pattern[i].len * tempoChangeFactor;\n      if (drumDefinition.pattern[i].pitch) drumBeat(drumDefinition.pattern[i].pitch, len, drumDefinition.pattern[i].velocity);else drumTrack.push({\n        cmd: 'move',\n        duration: len\n      });\n    }\n  }\n})();\n\nmodule.exports = flatten;","map":{"version":3,"sources":["/Users/HTMusic/Desktop/PROJECTS/subdivision-app/subdivision-app_v2/node_modules/abcjs/src/midi/abc_midi_flattener.js"],"names":["flatten","barAccidentals","accidentals","transpose","bagpipes","multiplier","tracks","startingTempo","startingMeter","tempoChangeFactor","instrument","currentTrack","pitchesTied","lastNoteDurationPosition","meter","num","den","chordTrack","chordTrackFinished","chordChannel","chordInstrument","drumInstrument","currentChords","lastChord","barBeat","drumTrack","drumTrackFinished","drumDefinition","normalBreakBetweenNotes","voices","options","undefined","length","i","voice","cmd","channel","j","element","el_type","writeNote","voicesOff","setKeySignature","qpm","resolveChords","writeDrum","program","normalizeDrumDefinition","params","console","log","push","tempo","breakSynonyms","findChord","elem","chord","ch","position","name","indexOf","toLowerCase","timeFromStart","distance","ct","duration","voiceOff","velocity","c","interpretChord","beat","startTriplet","tripletMultiplier","durationClass","graces","gracenotes","stealFromCurrent","stealFromDuration","processGraceNotes","writeGraceNotes","pitches","note","actualPitch","adjustPitch","pitch","startTie","volume","endTie","thisBreakBetweenNotes","soundDuration","ii","rest","endTriplet","scale","midipitch","accidental","extractOctave","extractNote","acc","d","lowercase","charCodeAt","graceDivider","companionDuration","graceDuration","ret","grace","g","skipNote","gp","Math","floor","basses","chick","root","substring","bass","bass2","chordNotes","remaining","arr","split","explicitBass","boom","boom2","chordIntervals","modifier","intervals","M","notes","writeBoom","beatLength","writeChick","rhythmPatterns","pattern","thisMeasureLength","parseInt","portionOfAMeasure","abs","beatsPresent","p","unshift","m","beats","cc","m2","thisChord","on","str","events","event","totalPlay","bars","playCount","len","div","k","totalTime","measuresPerBeat","numBars","factor","drumBeat","soundLength","measureLen","module","exports"],"mappings":"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","sourcesContent":["//    abc_midi_create.js: Turn a linear series of events into a series of MIDI commands.\n//    Copyright (C) 2010-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// We input a set of voices, but the notes are still complex. This pass changes the logical definitions\n// of the grace notes, decorations, ties, triplets, rests, transpositions, keys, and accidentals into actual note durations.\n// It also extracts guitar chords to a separate voice and resolves their rhythm.\n\nvar flatten;\n\n(function() {\n\t\"use strict\";\n\n\tvar barAccidentals;\n\tvar accidentals;\n\tvar transpose;\n\tvar bagpipes;\n\tvar multiplier;\n\tvar tracks;\n\tvar startingTempo;\n\tvar startingMeter;\n\tvar tempoChangeFactor = 1;\n\tvar instrument;\n\t// var channel;\n\tvar currentTrack;\n\tvar pitchesTied;\n\tvar lastNoteDurationPosition;\n\n\tvar meter = { num: 4, den: 4 };\n\tvar chordTrack;\n\tvar chordTrackFinished;\n\tvar chordChannel;\n\tvar chordInstrument = 0;\n\tvar drumInstrument = 128;\n\tvar currentChords;\n\tvar lastChord;\n\tvar barBeat;\n\n\tvar drumTrack;\n\tvar drumTrackFinished;\n\tvar drumDefinition = {};\n\n\tvar normalBreakBetweenNotes = 1.0/128;\t// a 128th note of silence between notes for articulation.\n\n\tflatten = function(voices, options) {\n\t\tif (!options) options = {};\n\t\tbarAccidentals = [];\n\t\taccidentals = [0,0,0,0,0,0,0];\n\t\tbagpipes = false;\n\t\tmultiplier = 1;\n\t\ttracks = [];\n\t\tstartingTempo = undefined;\n\t\tstartingMeter = undefined;\n\t\ttempoChangeFactor = 1;\n\t\tinstrument = undefined;\n\t\t// channel = undefined;\n\t\tcurrentTrack = undefined;\n\t\tpitchesTied = {};\n\n\t\t// For resolving chords.\n\t\tmeter = { num: 4, den: 4 };\n\t\tchordTrack = [];\n\t\tchordChannel = voices.length; // first free channel for chords\n\t\tchordTrackFinished = false;\n\t\tcurrentChords = [];\n\t\tlastChord = undefined;\n\t\tbarBeat = 0;\n\n\t\t// For the drum/metronome track.\n\t\tdrumTrack = [];\n\t\tdrumTrackFinished = false;\n\t\tdrumDefinition = {};\n\n\t\tfor (var i = 0; i < voices.length; i++) {\n\t\t\ttranspose = 0;\n\t\t\tlastNoteDurationPosition = -1;\n\t\t\tvar voice = voices[i];\n\t\t\tcurrentTrack = [{ cmd: 'program', channel: i, instrument: instrument ? instrument : 0 }];\n\t\t\tpitchesTied = {};\n\t\t\tfor (var j = 0; j < voice.length; j++) {\n\t\t\t\tvar element = voice[j];\n\t\t\t\tswitch (element.el_type) {\n\t\t\t\t\tcase \"note\":\n\t\t\t\t\t\twriteNote(element, options.voicesOff);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"key\":\n\t\t\t\t\t\taccidentals = setKeySignature(element);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"meter\":\n\t\t\t\t\t\tif (!startingMeter)\n\t\t\t\t\t\t\tstartingMeter = element;\n\t\t\t\t\t\tmeter = element;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"tempo\":\n\t\t\t\t\t\tif (!startingTempo)\n\t\t\t\t\t\t\tstartingTempo = element.qpm;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttempoChangeFactor = element.qpm ? startingTempo / element.qpm : 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"transpose\":\n\t\t\t\t\t\ttranspose = element.transpose;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"bar\":\n\t\t\t\t\t\tif (chordTrack.length > 0 && i === 0) {\n\t\t\t\t\t\t\tresolveChords();\n\t\t\t\t\t\t\tcurrentChords = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbarBeat = 0;\n\t\t\t\t\t\tbarAccidentals = [];\n\t\t\t\t\t\tif (i === 0) // Only write the drum part on the first voice so that it is not duplicated.\n\t\t\t\t\t\t\twriteDrum(voices.length+1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"bagpipes\":\n\t\t\t\t\t\tbagpipes = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"instrument\":\n\t\t\t\t\t\tif (instrument === undefined)\n\t\t\t\t\t\t\tinstrument = element.program;\n\t\t\t\t\t\tcurrentTrack[0].instrument = element.program;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"channel\":\n\t\t\t\t\t// \tif (channel === undefined)\n\t\t\t\t\t// \t\tchannel = element.channel;\n\t\t\t\t\t// \tcurrentTrack[0].channel = element.channel;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"drum\":\n\t\t\t\t\t\tdrumDefinition = normalizeDrumDefinition(element.params);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// This should never happen\n\t\t\t\t\t\tconsole.log(\"MIDI creation. Unknown el_type: \" + element.el_type + \"\\n\");// jshint ignore:line\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttracks.push(currentTrack);\n\t\t\tif (chordTrack.length > 0) // Don't do chords on more than one track, so turn off chord detection after we create it.\n\t\t\t\tchordTrackFinished = true;\n\t\t\tif (drumTrack.length > 0) // Don't do drums on more than one track, so turn off drum after we create it.\n\t\t\t\tdrumTrackFinished = true;\n\t\t}\n\t\tif (chordTrack.length > 0)\n\t\t\ttracks.push(chordTrack);\n\t\tif (drumTrack.length > 0)\n\t\t\ttracks.push(drumTrack);\n\t\t// Adjust the tempo according to the meter. The rules are this:\n\t\t// 1) If the denominator is 2 or 4, then always make a beat be the denominator.\n\t\t//\n\t\t// 2) If the denominator is 8 or 16, then:\n\t\t// a) If the numerator is divisible by 3, the beat is 3*denominator.\n\t\t// b) Otherwise the beat is the denominator.\n\t\t//\n\t\t// 3) If the denominator is anything else, then don't worry about it because it doesn't make sense. Don't modify it and hope for the best.\n\t\t//\n\t\t// Right now, the startingTempo is calculated for a quarter note, so modify it if necessary.\n\t\t// var num = startingMeter ? parseInt(startingMeter.num, 10) : meter.num;\n\t\t// var den = startingMeter ? parseInt(startingMeter.den, 10) : meter.den;\n\t\t// if (den === 2)\n\t\t// \tstartingTempo *= 2;\n\t\t// else if (den === 8) {\n\t\t// \tif (parseInt(num, 10) % 3 === 0)\n\t\t// \t\tstartingTempo *= 3/2;\n\t\t// \telse\n\t\t// \t\tstartingTempo /= 2;\n\t\t// } else if (den === 16) {\n\t\t// \tif (num % 3 === 0)\n\t\t// \t\tstartingTempo *= 3/4;\n\t\t// \telse\n\t\t// \t\tstartingTempo /= 4;\n\t\t// }\n\n\t\treturn { tempo: startingTempo, instrument: instrument, tracks: tracks };\n\t};\n\n\t//\n\t// The algorithm for chords is:\n\t// - The chords are done in a separate track.\n\t// - If there are notes before the first chord, then put that much silence to start the track.\n\t// - The pattern of chord expression depends on the meter, and how many chords are in a measure.\n\t// - There is a possibility that a measure will have an incorrect number of beats, if that is the case, then\n\t// start the pattern anew on the next measure number.\n\t// - If a chord root is not A-G, then ignore it as if the chord wasn't there at all.\n\t// - If a chord modification isn't in our supported list, change it to a major triad.\n\t//\n\t// - If there is only one chord in a measure:\n\t//\t\t- If 2/4, play root chord\n\t//\t\t- If cut time, play root(1) chord(3)\n\t//\t\t- If 3/4, play root chord chord\n\t//\t\t- If 4/4 or common time, play root chord fifth chord\n\t//\t\t- If 6/8, play root(1) chord(3) fifth(4) chord(6)\n\t//\t\t- For any other meter, play the full chord on each beat. (TODO-PER: expand this as more support is added.)\n\t//\n\t//\t- If there is a chord specified that is not on a beat, move it earlier to the previous beat, unless there is already a chord on that beat.\n\t//\t- Otherwise, move it later, unless there is already a chord on that beat.\n\t// \t- Otherwise, ignore it. (TODO-PER: expand this as more support is added.)\n\t//\n\t// - If there is a chord on the second beat, play a chord for the first beat instead of a bass note.\n\t// - Likewise, if there is a chord on the fourth beat of 4/4, play a chord on the third beat instead of a bass note.\n\t//\n\tvar breakSynonyms = [ 'break', '(break)', 'no chord', 'n.c.', 'tacet'];\n\n\tfunction findChord(elem) {\n\t\t// TODO-PER: Just using the first chord if there are more than one.\n\t\tif (chordTrackFinished || !elem.chord || elem.chord.length === 0)\n\t\t\treturn null;\n\n\t\t// Return the first annotation that is a regular chord: that is, it is in the default place or is a recognized \"tacit\" phrase.\n\t\tfor (var i = 0; i < elem.chord.length; i++) {\n\t\t\tvar ch = elem.chord[i];\n\t\t\tif (ch.position === 'default')\n\t\t\t\treturn ch.name;\n\t\t\tif (breakSynonyms.indexOf(ch.name.toLowerCase()) >= 0)\n\t\t\t\treturn 'break';\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction timeFromStart() {\n\t\tvar distance = 0;\n\t\tfor (var ct = 0; ct < currentTrack.length; ct++) {\n\t\t\tif (currentTrack[ct].cmd === 'move')\n\t\t\t\tdistance += currentTrack[ct].duration;\n\t\t}\n\t\treturn distance;\n\t}\n\n\tfunction writeNote(elem, voiceOff) {\n\t\t//\n\t\t// Create a series of note events to append to the current track.\n\t\t// The output event is one of: { pitchStart: pitch_in_abc_units, volume: from_1_to_64 }\n\t\t// { pitchStop: pitch_in_abc_units }\n\t\t// { moveTime: duration_in_abc_units }\n\t\t// If there are guitar chords, then they are put in a separate track, but they have the same format.\n\t\t//\n\n\t\tvar velocity = voiceOff ? 0 : 64;\n\t\tvar chord = findChord(elem);\n\t\tif (chord) {\n\t\t\tvar c = interpretChord(chord);\n\t\t\t// If this isn't a recognized chord, just completely ignore it.\n\t\t\tif (c) {\n\t\t\t\t// If we ever have a chord in this voice, then we add the chord track.\n\t\t\t\t// However, if there are chords on more than one voice, then just use the first voice.\n\t\t\t\tif (chordTrack.length === 0) {\n\t\t\t\t\tchordTrack.push({cmd: 'program', channel: chordChannel, instrument: chordInstrument});\n\t\t\t\t\t// need to figure out how far in time the chord started: if there are pickup notes before the chords start, we need pauses.\n\t\t\t\t\tvar distance = timeFromStart();\n\t\t\t\t\tif (distance > 0)\n\t\t\t\t\t\tchordTrack.push({cmd: 'move', duration: distance*tempoChangeFactor });\n\t\t\t\t}\n\n\t\t\t\tlastChord = c;\n\t\t\t\tcurrentChords.push({chord: lastChord, beat: barBeat});\n\t\t\t}\n\t\t}\n\n\t\tif (elem.startTriplet) {\n\t\t\tmultiplier = elem.tripletMultiplier;\n\t\t}\n\n\t\tvar duration = (elem.durationClass ? elem.durationClass : elem.duration) *multiplier;\n\t\tbarBeat += duration;\n\n\t\t// if there are grace notes, then also play them.\n\t\t// I'm not sure there is an exact rule for the length of the notes. My rule, unless I find\n\t\t// a better one is: the grace notes cannot take more than 1/2 of the main note's value.\n\t\t// A grace note (of 1/8 note duration) takes 1/8 of the main note's value.\n\t\tvar graces;\n\t\tif (elem.gracenotes) {\n\t\t\t// There are two cases: if this is bagpipe, the grace notes are played on the beat with the current note.\n\t\t\t// Normally, the grace notes would be played before the beat. (If this is the first note in the track, however, then it is played on the current beat.)\n\t\t\t// The reason for the exception on the first note is that it would otherwise move the whole track in time and would affect all the other tracks.\n\t\t\tvar stealFromCurrent = (bagpipes || lastNoteDurationPosition < 0 || currentTrack.length === 0);\n\t\t\tvar stealFromDuration = stealFromCurrent ? duration : currentTrack[lastNoteDurationPosition].duration;\n\t\t\tgraces = processGraceNotes(elem.gracenotes, stealFromDuration);\n\t\t\tif (!bagpipes) {\n\t\t\t\tduration = writeGraceNotes(graces, stealFromCurrent, duration, null, velocity);\n\t\t\t}\n\t\t}\n\n\t\tif (elem.pitches) {\n\t\t\tif (graces && bagpipes) {\n\t\t\t\t// If it is bagpipes, then the graces are played with the note. If the grace has the same pitch as the note, then we just skip it.\n\t\t\t\tduration = writeGraceNotes(graces, true, duration, null, velocity);\n\t\t\t}\n\t\t\tvar pitches = [];\n\t\t\tfor (var i=0; i<elem.pitches.length; i++) {\n\t\t\t\tvar note = elem.pitches[i];\n\t\t\t\tvar actualPitch = adjustPitch(note);\n\t\t\t\tpitches.push({ pitch: actualPitch, startTie: note.startTie });\n\n\t\t\t\t// TODO-PER: should the volume vary depending on whether it is on a beat or measure start?\n\t\t\t\tif (!pitchesTied[''+actualPitch])\t// If this is the second note of a tie, we don't start it again.\n\t\t\t\t\tcurrentTrack.push({ cmd: 'start', pitch: actualPitch, volume: velocity });\n\n\t\t\t\tif (note.startTie)\n\t\t\t\t\tpitchesTied[''+actualPitch] = true;\n\t\t\t\telse if (note.endTie)\n\t\t\t\t\tpitchesTied[''+actualPitch] = false;\n\t\t\t}\n\t\t\tvar thisBreakBetweenNotes = normalBreakBetweenNotes;\n\t\t\tvar soundDuration = duration-normalBreakBetweenNotes;\n\t\t\tif (soundDuration < 0) {\n\t\t\t\tsoundDuration = 0;\n\t\t\t\tthisBreakBetweenNotes = 0;\n\t\t\t}\n\t\t\tcurrentTrack.push({ cmd: 'move', duration: soundDuration*tempoChangeFactor });\n\t\t\tlastNoteDurationPosition = currentTrack.length-1;\n\n\t\t\tfor (var ii = 0; ii < pitches.length; ii++) {\n\t\t\t\tif (!pitchesTied[''+pitches[ii].pitch])\n\t\t\t\t\tcurrentTrack.push({ cmd: 'stop', pitch: pitches[ii].pitch });\n\t\t\t}\n\t\t\tcurrentTrack.push({ cmd: 'move', duration: thisBreakBetweenNotes*tempoChangeFactor });\n\t\t} else if (elem.rest) {\n\t\t\tcurrentTrack.push({ cmd: 'move', duration: duration*tempoChangeFactor });\n\t\t}\n\n\t\tif (elem.endTriplet) {\n\t\t\tmultiplier=1;\n\t\t}\n\t}\n\n\tvar scale = [0,2,4,5,7,9,11];\n\tfunction adjustPitch(note) {\n\t\tif (note.midipitch)\n\t\t\treturn note.midipitch - 60;\n\t\tvar pitch = note.pitch;\n\t\tif (note.accidental) {\n\t\t\tswitch(note.accidental) { // change that pitch (not other octaves) for the rest of the bar\n\t\t\t\tcase \"sharp\":\n\t\t\t\t\tbarAccidentals[pitch]=1; break;\n\t\t\t\tcase \"flat\":\n\t\t\t\t\tbarAccidentals[pitch]=-1; break;\n\t\t\t\tcase \"natural\":\n\t\t\t\t\tbarAccidentals[pitch]=0; break;\n\t\t\t\tcase \"dblsharp\":\n\t\t\t\t\tbarAccidentals[pitch]=2; break;\n\t\t\t\tcase \"dblflat\":\n\t\t\t\t\tbarAccidentals[pitch]=-2; break;\n\t\t\t}\n\t\t}\n\n\t\tvar actualPitch = extractOctave(pitch) *12 + scale[extractNote(pitch)];\n\n\t\tif ( barAccidentals[pitch]!==undefined) {\n\t\t\tactualPitch +=  barAccidentals[pitch];\n\t\t} else { // use normal accidentals\n\t\t\tactualPitch +=  accidentals[extractNote(pitch)];\n\t\t}\n\t\tactualPitch += transpose;\n\t\treturn actualPitch;\n\t}\n\n\tfunction setKeySignature(elem) {\n\t\tvar accidentals = [0,0,0,0,0,0,0];\n\t\tif (!elem.accidentals) return accidentals;\n\t\tfor (var i = 0; i < elem.accidentals.length; i++) {\n\t\t\tvar acc = elem.accidentals[i];\n\t\t\tvar d = (acc.acc === \"sharp\") ? 1 : (acc.acc === \"natural\") ?0 : -1;\n\n\t\t\tvar lowercase = acc.note.toLowerCase();\n\t\t\tvar note = extractNote(lowercase.charCodeAt(0)-'c'.charCodeAt(0));\n\t\t\taccidentals[note]+=d;\n\t\t}\n\t\treturn accidentals;\n\t}\n\n\tvar graceDivider = 8; // This is the fraction of a note that the grace represents. That is, if this is 2, then a grace note of 1/16 would be a 1/32.\n\tfunction processGraceNotes(graces, companionDuration) {\n\t\tvar graceDuration = 0;\n\t\tvar ret = [];\n\t\tvar grace;\n\t\tfor (var g = 0; g < graces.length; g++) {\n\t\t\tgrace = graces[g];\n\t\t\tgraceDuration += grace.duration;\n\t\t}\n\t\tgraceDuration = graceDuration / graceDivider;\n\t\tvar multiplier = (graceDuration * 2 > companionDuration) ? companionDuration/(graceDuration * 2) : 1;\n\n\t\tfor (g = 0; g < graces.length; g++) {\n\t\t\tgrace = graces[g];\n\t\t\tvar pitch = grace.midipitch ? grace.midipitch - 60 : grace.pitch;\n\t\t\tret.push({ pitch: pitch, duration: grace.duration/graceDivider*multiplier });\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction writeGraceNotes(graces, stealFromCurrent, duration, skipNote, velocity) {\n\t\tfor (var g = 0; g < graces.length; g++) {\n\t\t\tvar gp = adjustPitch(graces[g]);\n\t\t\tif (gp !== skipNote)\n\t\t\t\tcurrentTrack.push({cmd: 'start', pitch: gp, volume: velocity});\n\t\t\tcurrentTrack.push({cmd: 'move', duration: graces[g].duration*tempoChangeFactor });\n\t\t\tif (gp !== skipNote)\n\t\t\t\tcurrentTrack.push({cmd: 'stop', pitch: gp});\n\t\t\tif (!stealFromCurrent)\n\t\t\t\tcurrentTrack[lastNoteDurationPosition].duration -= graces[g].duration;\n\t\t\tduration -= graces[g].duration;\n\t\t}\n\t\treturn duration;\n\t}\n\n\tfunction extractOctave(pitch) {\n\t\treturn Math.floor(pitch/7);\n\t}\n\n\tfunction extractNote(pitch) {\n\t\tpitch = pitch%7;\n\t\tif (pitch<0) pitch+=7;\n\t\treturn pitch;\n\t}\n\n\tvar basses = {\n\t\t'A': -27, 'B': -25, 'C': -24, 'D': -22, 'E': -20, 'F': -19, 'G': -17\n\t};\n\tfunction interpretChord(name) {\n\t\t// chords have the format:\n\t\t// [root][acc][modifier][/][bass][acc]\n\t\t// (The chord might be surrounded by parens. Just ignore them.)\n\t\t// root must be present and must be from A-G.\n\t\t// acc is optional and can be # or b\n\t\t// The modifier can be a wide variety of things, like \"maj7\". As they are discovered, more are supported here.\n\t\t// If there is a slash, then there is a bass note, which can be from A-G, with an optional acc.\n\t\t// If the root is unrecognized, then \"undefined\" is returned and there is no chord.\n\t\t// If the modifier is unrecognized, a major triad is returned.\n\t\t// If the bass notes is unrecognized, it is ignored.\n\t\tif (name.length === 0)\n\t\t\treturn undefined;\n\t\tif (name === 'break')\n\t\t\treturn { chick: []};\n\t\tvar root = name.substring(0,1);\n\t\tif (root === '(') {\n\t\t\tname = name.substring(1,name.length-2);\n\t\t\tif (name.length === 0)\n\t\t\t\treturn undefined;\n\t\t\troot = name.substring(0,1);\n\t\t}\n\t\tvar bass = basses[root];\n\t\tif (!bass)\t// If the bass note isn't listed, then this was an unknown root. Only A-G are accepted.\n\t\t\treturn undefined;\n\t\tbass  += transpose;\n\t\tvar bass2 = bass - 5;\t// The alternating bass is a 4th below\n\t\tvar chick;\n\t\tif (name.length === 1)\n\t\t\tchick = chordNotes(bass, '');\n\t\tvar remaining = name.substring(1);\n\t\tvar acc = remaining.substring(0,1);\n\t\tif (acc === 'b' || acc === '♭') {\n\t\t\tbass--;\n\t\t\tbass2--;\n\t\t\tremaining = remaining.substring(1);\n\t\t} else if (acc === '#' || acc === '♯') {\n\t\t\tbass++;\n\t\t\tbass2++;\n\t\t\tremaining = remaining.substring(1);\n\t\t}\n\t\tvar arr = remaining.split('/');\n\t\tchick = chordNotes(bass, arr[0]);\n\t\tif (arr.length === 2) {\n\t\t\tvar explicitBass = basses[arr[1]];\n\t\t\tif (explicitBass) {\n\t\t\t\tbass = basses[arr[1]] + transpose;\n\t\t\t\tbass2 = bass;\n\t\t\t}\n\t\t}\n\t\treturn { boom: bass, boom2: bass2, chick: chick };\n\t}\n\n\tvar chordIntervals = {\n\t\t'M': [ 0, 4, 7 ],\n\t\t'6': [ 0, 4, 7, 9 ],\n\t\t'7': [ 0, 4, 7, 10 ],\n\t\t'+7': [ 0, 4, 8, 10 ],\n\t\t'aug7': [ 0, 4, 8, 10 ],\n\t\t'maj7': [ 0, 4, 7, 11 ],\n\t\t'∆7': [ 0, 4, 7, 11 ],\n\t\t'9': [ 0, 4, 7, 10, 14 ],\n\t\t'11': [ 0, 4, 7, 10, 14, 16 ],\n\t\t'13': [ 0, 4, 7, 10, 14, 18 ],\n\t\t'+': [ 0, 4, 8 ],\n\t\t'7#5': [ 0, 4, 8, 10 ],\n\t\t'7+5': [ 0, 4, 8, 10 ],\n\t\t'7b9': [ 0, 4, 7, 10, 13 ],\n\t\t'7b5': [ 0, 4, 6, 10 ],\n\t\t'9#5': [ 0, 4, 8, 10, 14 ],\n\t\t'9+5': [ 0, 4, 8, 10, 14 ],\n\t\t'm': [ 0, 3, 7 ],\n\t\t'-': [ 0, 3, 7 ],\n\t\t'm6': [ 0, 3, 7, 9 ],\n\t\t'-6': [ 0, 3, 7, 9 ],\n\t\t'm7': [ 0, 3, 7, 10 ],\n\t\t'-7': [ 0, 3, 7, 10 ],\n\t\t'dim': [ 0, 3, 6 ],\n\t\t'dim7': [ 0, 3, 6, 9 ],\n\t\t'°7': [ 0, 3, 6, 9 ],\n\t\t'ø7': [ 0, 3, 6, 10 ],\n\t\t'7sus4': [ 0, 5, 7, 10 ],\n\t\t'm7sus4': [ 0, 5, 7, 10 ],\n\t\t'sus4': [ 0, 5, 7 ]\n\t};\n\tfunction chordNotes(bass, modifier) {\n\t\tvar intervals = chordIntervals[modifier];\n\t\tif (!intervals)\n\t\t\tintervals = chordIntervals.M;\n\t\tbass += 12;\t// the chord is an octave above the bass note.\n\t\tvar notes = [ ];\n\t\tfor (var i = 0; i < intervals.length; i++) {\n\t\t\tnotes.push(bass + intervals[i]);\n\t\t}\n\t\treturn notes;\n\t}\n\n\tfunction writeBoom(boom, beatLength) {\n\t\t// undefined means there is a stop time.\n\t\tif (boom !== undefined)\n\t\t\tchordTrack.push({cmd: 'start', pitch: boom, volume: 64});\n\t\tchordTrack.push({ cmd: 'move', duration: (beatLength/2)*tempoChangeFactor });\n\t\tif (boom !== undefined)\n\t\t\tchordTrack.push({ cmd: 'stop', pitch: boom });\n\t\tchordTrack.push({ cmd: 'move', duration: (beatLength/2)*tempoChangeFactor });\n\t}\n\n\tfunction writeChick(chick, beatLength) {\n\t\tfor (var c = 0; c < chick.length; c++)\n\t\t\tchordTrack.push({cmd: 'start', pitch: chick[c], volume: 48});\n\t\tchordTrack.push({ cmd: 'move', duration: (beatLength/2)*tempoChangeFactor });\n\t\tfor (c = 0; c < chick.length; c++)\n\t\t\tchordTrack.push({ cmd: 'stop', pitch: chick[c] });\n\t\tchordTrack.push({ cmd: 'move', duration: (beatLength/2)*tempoChangeFactor });\n\t}\n\n\tvar rhythmPatterns = { \"2/2\": [ 'boom', 'chick' ],\n\t\t\"2/4\": [ 'boom', 'chick' ],\n\t\t\"3/4\": [ 'boom', 'chick', 'chick' ],\n\t\t\"4/4\": [ 'boom', 'chick', 'boom2', 'chick' ],\n\t\t\"5/4\": [ 'boom', 'chick', 'chick', 'boom2', 'chick' ],\n\t\t\"6/8\": [ 'boom', '', 'chick', 'boom2', '', 'chick' ],\n\t\t\"9/8\": [ 'boom', '', 'chick', 'boom2', '', 'chick', 'boom2', '', 'chick' ],\n\t\t\"12/8\": [ 'boom', '', 'chick', 'boom2', '', 'chick', 'boom2', '', 'chick', 'boom2', '', 'chick' ],\n\t};\n\n\tfunction resolveChords() {\n\t\tvar num = meter.num;\n\t\tvar den = meter.den;\n\t\tvar beatLength = 1/den;\n\t\tvar pattern = rhythmPatterns[num+'/'+den];\n\t\tvar thisMeasureLength = parseInt(num,10)/parseInt(den,10);\n\t\t// See if this is a full measure: unfortunately, with triplets, there isn't an exact match, what with the floating point, so we just see if it is \"close\".\n\t\tvar portionOfAMeasure = Math.abs(thisMeasureLength - barBeat);\n\t\tif (!pattern || portionOfAMeasure > 0.0078125) { // If it is an unsupported meter, or this isn't a full bar, just chick on each beat.\n\t\t\tpattern = [];\n\t\t\tvar beatsPresent = barBeat / beatLength;\n\t\t\tfor (var p = 0; p < beatsPresent; p++)\n\t\t\t\tpattern.push(\"chick\");\n\t\t}\n\n\t\tif (currentChords.length === 0) { // there wasn't a new chord this measure, so use the last chord declared.\n\t\t\tcurrentChords.push({ beat: 0, chord: lastChord});\n\t\t}\n\t\tif (currentChords[0].beat !== 0 && lastChord) { // this is the case where there is a chord declared in the measure, but not on its first beat.\n\t\t\tcurrentChords.unshift({ beat: 0, chord: lastChord});\n\t\t}\n\t\tif (currentChords.length === 1) {\n\t\t\tfor (var m = 0; m < pattern.length; m++) {\n\t\t\t\tswitch (pattern[m]) {\n\t\t\t\t\tcase 'boom':\n\t\t\t\t\t\twriteBoom(currentChords[0].chord.boom, beatLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'boom2':\n\t\t\t\t\t\twriteBoom(currentChords[0].chord.boom2, beatLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'chick':\n\t\t\t\t\t\twriteChick(currentChords[0].chord.chick, beatLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '':\n\t\t\t\t\t\tchordTrack.push({ cmd: 'move', duration: beatLength*tempoChangeFactor });\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If we are here it is because more than one chord was declared in the measure, so we have to sort out what chord goes where.\n\n\t\t// First, normalize the chords on beats.\n\t\tvar beats = {};\n\t\tfor (var i = 0; i < currentChords.length; i++) {\n\t\t\tvar cc = currentChords[i];\n\t\t\tvar beat = Math.floor(cc.beat / beatLength);\t// now all the beats are integers, there may be\n\t\t\tbeats[''+beat] = cc;\n\t\t}\n\n\t\t// - If there is a chord on the second beat, play a chord for the first beat instead of a bass note.\n\t\t// - Likewise, if there is a chord on the fourth beat of 4/4, play a chord on the third beat instead of a bass note.\n\t\tfor (var m2 = 0; m2 < pattern.length; m2++) {\n\t\t\tvar thisChord;\n\t\t\tif (beats[''+m2])\n\t\t\t\tthisChord = beats[''+m2];\n\t\t\tswitch (pattern[m2]) {\n\t\t\t\tcase 'boom':\n\t\t\t\t\tif (beats[''+(m2+1)]) // If there is not a chord change on the next beat, play a bass note.\n\t\t\t\t\t\twriteChick(thisChord.chord.chick, beatLength);\n\t\t\t\t\telse\n\t\t\t\t\t\twriteBoom(thisChord.chord.boom, beatLength);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boom2':\n\t\t\t\t\tif (beats[''+(m2+1)])\n\t\t\t\t\t\twriteChick(thisChord.chord.chick, beatLength);\n\t\t\t\t\telse\n\t\t\t\t\t\twriteBoom(thisChord.chord.boom2, beatLength);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'chick':\n\t\t\t\t\twriteChick(thisChord.chord.chick, beatLength);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\t\tif (beats[''+m2])\t// If there is an explicit chord on this beat, play it.\n\t\t\t\t\t\twriteChick(thisChord.chord.chick, beatLength);\n\t\t\t\t\telse\n\t\t\t\t\t\tchordTrack.push({cmd: 'move', duration: beatLength*tempoChangeFactor });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction normalizeDrumDefinition(params) {\n\t\t// Be very strict with the drum definition. If anything is not perfect,\n\t\t// just turn the drums off.\n\t\t// Perhaps all of this logic belongs in the parser instead.\n\t\tif (params.pattern.length === 0 || params.on === false)\n\t\t\treturn { on: false };\n\n\t\tvar str = params.pattern[0];\n\t\tvar events = [];\n\t\tvar event = \"\";\n\t\tvar totalPlay = 0;\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tif (str[i] === 'd')\n\t\t\t\ttotalPlay++;\n\t\t\tif (str[i] === 'd' || str[i] === 'z') {\n\t\t\t\tif (event.length !== 0) {\n\t\t\t\t\tevents.push(event);\n\t\t\t\t\tevent = str[i];\n\t\t\t\t} else\n\t\t\t\t\tevent = event + str[i];\n\t\t\t} else {\n\t\t\t\tif (event.length === 0) {\n\t\t\t\t\t// there was an error: the string should have started with d or z\n\t\t\t\t\treturn {on: false};\n\t\t\t\t}\n\t\t\t\tevent = event + str[i];\n\t\t\t}\n\t\t}\n\n\t\tif (event.length !== 0)\n\t\t\tevents.push(event);\n\n\t\t// Now the events array should have one item per event.\n\t\t// There should be two more params for each event: the volume and the pitch.\n\t\tif (params.pattern.length !== totalPlay*2 + 1)\n\t\t\treturn { on: false };\n\n\t\tvar ret = { on: true, bars: params.bars, pattern: []};\n\t\tvar beatLength = 1/meter.den;\n\t\tvar playCount = 0;\n\t\tfor (var j = 0; j < events.length; j++) {\n\t\t\tevent = events[j];\n\t\t\tvar len = 1;\n\t\t\tvar div = false;\n\t\t\tvar num = 0;\n\t\t\tfor (var k = 1; k < event.length; k++) {\n\t\t\t\tswitch(event[k]) {\n\t\t\t\t\tcase \"/\":\n\t\t\t\t\t\tif (num !== 0)\n\t\t\t\t\t\t\tlen *= num;\n\t\t\t\t\t\tnum = 0;\n\t\t\t\t\t\tdiv = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"1\":\n\t\t\t\t\tcase \"2\":\n\t\t\t\t\tcase \"3\":\n\t\t\t\t\tcase \"4\":\n\t\t\t\t\tcase \"5\":\n\t\t\t\t\tcase \"6\":\n\t\t\t\t\tcase \"7\":\n\t\t\t\t\tcase \"8\":\n\t\t\t\t\tcase \"9\":\n\t\t\t\t\t\tnum = num*10 +event[k];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn { on: false };\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (div) {\n\t\t\t\tif (num === 0) num = 2; // a slash by itself is interpreted as \"/2\"\n\t\t\t\tlen /= num;\n\t\t\t} else if (num)\n\t\t\t\tlen *= num;\n\t\t\tif (event[0] === 'd') {\n\t\t\t\tret.pattern.push({ len: len * beatLength, pitch: params.pattern[1 + playCount], velocity: params.pattern[1 + playCount + totalPlay]});\n\t\t\t\tplayCount++;\n\t\t\t} else\n\t\t\t\tret.pattern.push({ len: len * beatLength, pitch: null});\n\t\t}\n\t\t// Now normalize the pattern to cover the correct number of measures. The note lengths passed are relative to each other and need to be scaled to fit a measure.\n\t\tvar totalTime = 0;\n\t\tvar measuresPerBeat = meter.num/meter.den;\n\t\tfor (var ii = 0; ii < ret.pattern.length; ii++)\n\t\t\ttotalTime += ret.pattern[ii].len;\n\t\tvar numBars = params.bars ? params.bars : 1;\n\t\tvar factor = totalTime /  numBars / measuresPerBeat;\n\t\tfor (ii = 0; ii < ret.pattern.length; ii++)\n\t\t\tret.pattern[ii].len = ret.pattern[ii].len / factor;\n\t\treturn ret;\n\t}\n\n\tfunction drumBeat(pitch, soundLength, volume) {\n\t\tdrumTrack.push({ cmd: 'start', pitch: pitch - 60, volume: volume});\n\t\tdrumTrack.push({ cmd: 'move', duration: soundLength });\n\t\tdrumTrack.push({ cmd: 'stop', pitch: pitch - 60 });\n\t}\n\n\tfunction writeDrum(channel) {\n\t\tif (drumTrack.length === 0 && !drumDefinition.on)\n\t\t\treturn;\n\n\t\tvar measureLen = meter.num/meter.den;\n\t\tif (drumTrack.length === 0) {\n\t\t\tdrumTrack.push({cmd: 'program', channel: channel, instrument: drumInstrument});\n\t\t\t// need to figure out how far in time the bar started: if there are pickup notes before the chords start, we need pauses.\n\t\t\tvar distance = timeFromStart();\n\t\t\tif (distance > 0 && distance < measureLen - 0.01) { // because of floating point, adding the notes might not exactly equal the measure size.\n\t\t\t\tdrumTrack.push({cmd: 'move', duration: distance * tempoChangeFactor});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (!drumDefinition.on) {\n\t\t\t// this is the case where there has been a drum track, but it was specifically turned off.\n\t\t\tdrumTrack.push({ cmd: 'move', duration: measureLen * tempoChangeFactor });\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < drumDefinition.pattern.length; i++) {\n\t\t\tvar len = drumDefinition.pattern[i].len * tempoChangeFactor;\n\t\t\tif (drumDefinition.pattern[i].pitch)\n\t\t\t\tdrumBeat(drumDefinition.pattern[i].pitch, len, drumDefinition.pattern[i].velocity);\n\t\t\telse\n\t\t\t\tdrumTrack.push({ cmd: 'move', duration: len });\n\t\t}\n\t}\n})();\n\nmodule.exports = flatten;\n"]},"metadata":{},"sourceType":"script"}